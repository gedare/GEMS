diff -X dontdiff -uprN gems-2.1.1/common/Makefile.common gems-2.1.1-hwpq-dev/common/Makefile.common
--- gems-2.1.1/common/Makefile.common	2010-09-01 14:06:12.000000000 -0400
+++ gems-2.1.1-hwpq-dev/common/Makefile.common	2011-01-10 12:48:37.000000000 -0500
@@ -56,11 +56,11 @@ ifeq ($(SIMICS_VERSION),2.2.X)
   SIMICS_INCLUDE_ROOT := /dev/null22
 else
 ifeq ($(SIMICS_VERSION),3.0)
-  SIMICS_ROOT := /dev/null30
+  SIMICS_ROOT := $(GEMS_ROOT)/simics
   SIMICS_EXEC_ROOT := $(GEMS_ROOT)/simics
   # NOTE: This variable must be updated to point to the src/include directory
   # of your Simics 3.0 installation
-  SIMICS_INCLUDE_ROOT := $(GEMS_ROOT)/simics/src/include
+  SIMICS_INCLUDE_ROOT := $(SIMICS_INSTALL)/src/include
 else
   SIMICS_ROOT := /dev/blah
   SIMICS_EXEC_ROOT := /dev/foo
@@ -98,7 +98,7 @@ LFLAGS := 
 CC_VERSION=3.4.4
 
 ifeq ($(HOST_TYPE),amd64-linux)
-  CC =  /s/gcc-3.4.4/bin/g++
+  CC =  /usr/bin/g++
   #CC =  /usr/bin/g++
   OPT_FLAGS = -m64 -march=opteron -fPIC
   LDFLAGS += -ggdb -g3 -Wl,-R/s/gcc-3.4.4/lib64 
@@ -106,14 +106,14 @@ ifeq ($(HOST_TYPE),amd64-linux)
 
 else
 ifeq ($(HOST_TYPE),v9-sol8-64)
-  # CC = purify -best-effort -leaks-at-exit=yes -chain-length="15" /s/gcc-3.4.1/bin/g++ -static
+  # CC = purify -best-effort -leaks-at-exit=yes -chain-length="15" /usr/bin/g++ -static
   # CC = /s/gcc-3.4.3/bin/g++ -I/s/getopt-0/include
   CC = g++ -I/s/getopt-0/include
   OPT_FLAGS = -m64 -mcpu=v9 -DUSE_DIRENT
   LDFLAGS += -m64 -L/s/getopt-0/lib -lgetopt
 else
 ifeq ($(HOST_TYPE),x86-linux)
-  CC =  /s/gcc-3.4.1/bin/g++
+  CC =  /usr/bin/g++
   #CC =  /usr/bin/g++
   OPT_FLAGS = -march=i686
   LDFLAGS += -ggdb -g3
diff -X dontdiff -uprN gems-2.1.1/opal/common/hfatypes.h gems-2.1.1-hwpq-dev/opal/common/hfatypes.h
--- gems-2.1.1/opal/common/hfatypes.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/common/hfatypes.h	2011-01-10 12:48:11.000000000 -0500
@@ -162,6 +162,7 @@ enum fu_type_t {
   FU_FLOATSQRT,            // floating point square root
   FU_RDPORT,               // memory read port
   FU_WRPORT,               // memory write port
+  FU_IMPDEP2,              // impdep2 functional unit
   FU_NUM_FU_TYPES          // total functional unit classes
 };
 
diff -X dontdiff -uprN gems-2.1.1/opal/config/config.defaults gems-2.1.1-hwpq-dev/opal/config/config.defaults
--- gems-2.1.1/opal/config/config.defaults	2010-09-01 14:06:14.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/config/config.defaults	2011-02-08 12:08:57.000000000 -0500
@@ -48,20 +48,22 @@ CONFIG_ALU_MAPPING: (
     6, // FU_FLOATDIV,             // floating point divider
     6, // FU_FLOATSQRT,            // floating point square root
     7, // FU_RDPORT,               // memory read port
-    8  // FU_WRPORT,               // memory write port
+    8,  // FU_WRPORT,               // memory write port
+    9 // FU_IMPDEP2,               // implementation dependent FU
        // FU_NUM_FU_TYPES          // total functional unit classes
 )
 
 CONFIG_NUM_ALUS: (
-  127, // inst does not use a functional unit
-    4, // integer ALU (fused multiply/add)
-    2, // integer divisor
-    2, // compare branch units
-    4, // FP ALU
-    2, // FP multiply
-    2, // FP divisor / square-root
-    10, // load unit (memory read)
-    10, // store unit (memory write)
+  127, // inst does not use a functional unit (0)
+    4, // integer ALU (fused multiply/add)    (1)
+    2, // integer divisor                     (2)
+    2, // compare branch units                (3)
+    4, // FP ALU                              (4)
+    2, // FP multiply                         (5)
+    2, // FP divisor / square-root            (6)
+    10, // load unit (memory read)            (7)
+    10, // store unit (memory write)          (8)
+    1, // impdep2                             (9)
     0,
     0,
     0,
@@ -81,7 +83,8 @@ CONFIG_ALU_LATENCY: (
    12, // FU_FLOATDIV,             // floating point divider
    24, // FU_FLOATSQRT,            // floating point square root
     1, // FU_RDPORT,               // memory read port
-    1  // FU_WRPORT,               // memory write port
+    1,  // FU_WRPORT,               // memory write port
+    1  // FU_IMPDEP2,               // implementation dependent FU
        // FU_NUM_FU_TYPES          // total functional unit classes
 )
 
@@ -115,6 +118,14 @@ DL1_BLOCK_BITS: 6         // 64  byte L1
 DL1_MSHR_ENTRIES: 256
 DL1_STREAM_BUFFERS: 0
 
+// L1 hwds cache
+HL1_IDEAL: 0              // 1 -> ideal H cache
+HL1_ASSOC: 2              // direct mapped
+HL1_SET_BITS: 8           // 256 sets
+HL1_BLOCK_BITS: 6         // 64  byte L1 cache line
+HL1_MSHR_ENTRIES: 256
+HL1_STREAM_BUFFERS: 0
+
 // L2 unified cache
 L2_IDEAL: 0              // 1 -> ideal L2 cache
 L2_ASSOC: 4             // 4 way set associative
diff -X dontdiff -uprN gems-2.1.1/opal/Makefile gems-2.1.1-hwpq-dev/opal/Makefile
--- gems-2.1.1/opal/Makefile	2010-09-01 14:06:15.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/Makefile	2011-02-08 14:00:02.000000000 -0500
@@ -180,6 +180,7 @@ SRC_CPP := \
 	flow.C \
 	flatarf.C \
 	gshare.C \
+	hwpq.C \
 	igshare.C \
 	hfa.C \
 	histogram.C \
diff -X dontdiff -uprN gems-2.1.1/opal/system/cache.C gems-2.1.1-hwpq-dev/opal/system/cache.C
--- gems-2.1.1/opal/system/cache.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/cache.C	2011-01-10 12:47:58.000000000 -0500
@@ -360,57 +360,6 @@ pa_t generic_cache_template<BlockType>::
 
 #endif
 
-//**************************************************************************
-template <class BlockType>
-void generic_cache_template<BlockType>::Warmup(pa_t a) {
-
-  uint32 index = Set(a);
-  pa_t ba = BlockAddress(a);
-  ASSERT(index < n_sets);
-
-  /* search all sets until we find a match */
-  BlockType *set = &cache[index * m_assoc];
-  for (uint32 i = 0 ; i < m_assoc ; i ++) {
-    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
-    if (hit) { 
-      return;
-    }
-  }
-  int replace_set = random() % m_assoc;
-  /* write new block into the cache */
-  set[replace_set].address_state = ba | CACHE_BLK_VALID;
-}
-
-//**************************************************************************
-template <class BlockType>
-void generic_cache_template<BlockType>::OracleAccess(pa_t a) {
-  /* used when we want the execution of a particular load or store to
-   * be prefetched perfectly.
-   */
-  uint32 index = Set(a);
-  pa_t ba = BlockAddress(a);
-  ASSERT(index < n_sets);
-  STAT_INC(reads);
-
-  /* search all sets until we find a match */
-  BlockType *set = &cache[index * m_assoc];
-  int replace_set = 0;
-  for (uint32 i = 0 ; i < m_assoc ; i ++) {
-    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
-    if (hit) { 
-      STAT_INC(read_hit);
-      return;
-    } 
-    if (set[i].last_access < set[replace_set].last_access) {
-      replace_set = i;
-    }
-  }
-
-  /* write new block into the cache */
-  STAT_INC(read_miss);
-  set[replace_set].address_state = ba | CACHE_BLK_VALID;
-  set[replace_set].last_access = m_eventQueue->getCycle();
-}
 
 //**************************************************************************
 /* this function is called when a store is retired.  If the address
@@ -568,18 +517,6 @@ set_error_t generic_cache_template<Block
   return Sim_Set_Ok;
 }
 
-//**************************************************************************
-template <class BlockType>
-int generic_cache_template<BlockType>::registerCheckpoint( confio_t *conf )
-{
-  int rc;
-
-  rc = conf->register_attribute( name,
-                                 generic_cache_template<BlockType>::get_cache_data, (void *) this,
-                                 generic_cache_template<BlockType>::set_cache_data, (void *) this );
-  return rc;
-}
-
 /*------------------------------------------------------------------------*/
 /* Accessor(s) / mutator(s)                                               */
 /*------------------------------------------------------------------------*/
diff -X dontdiff -uprN gems-2.1.1/opal/system/cache.h gems-2.1.1-hwpq-dev/opal/system/cache.h
--- gems-2.1.1/opal/system/cache.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/cache.h	2011-01-10 12:47:58.000000000 -0500
@@ -59,6 +59,7 @@
 
 #include "mshr.h"
 #include "scheduler.h"
+#include "confio.h"
 
 /*------------------------------------------------------------------------*/
 /* Macro declarations                                                     */
@@ -473,4 +474,72 @@ protected:
 /* Global functions                                                       */
 /*------------------------------------------------------------------------*/
 
+/* workaround see: https://lists.cs.wisc.edu/archive/gems-users/2009-March/msg00116.shtml */
+//**************************************************************************
+template <class BlockType>
+int generic_cache_template<BlockType>::registerCheckpoint( confio_t *conf )
+{
+  int rc;
+
+  rc = conf->register_attribute( name,
+                                 generic_cache_template<BlockType>::get_cache_data, (void *) this,
+                                 generic_cache_template<BlockType>::set_cache_data, (void *) this );
+  return rc;
+}
+
+//**************************************************************************
+template <class BlockType>
+void generic_cache_template<BlockType>::OracleAccess(pa_t a) {
+  /* used when we want the execution of a particular load or store to
+   * be prefetched perfectly.
+   */
+  uint32 index = Set(a);
+  pa_t ba = BlockAddress(a);
+  ASSERT(index < n_sets);
+  STAT_INC(reads);
+
+  /* search all sets until we find a match */
+  BlockType *set = &cache[index * m_assoc];
+  int replace_set = 0;
+  for (uint32 i = 0 ; i < m_assoc ; i ++) {
+    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
+    if (hit) { 
+      STAT_INC(read_hit);
+      return;
+    } 
+    if (set[i].last_access < set[replace_set].last_access) {
+      replace_set = i;
+    }
+  }
+
+  /* write new block into the cache */
+  STAT_INC(read_miss);
+  set[replace_set].address_state = ba | CACHE_BLK_VALID;
+  set[replace_set].last_access = m_eventQueue->getCycle();
+}
+
+//**************************************************************************
+template <class BlockType>
+void generic_cache_template<BlockType>::Warmup(pa_t a) {
+
+  uint32 index = Set(a);
+  pa_t ba = BlockAddress(a);
+  ASSERT(index < n_sets);
+
+  /* search all sets until we find a match */
+  BlockType *set = &cache[index * m_assoc];
+  for (uint32 i = 0 ; i < m_assoc ; i ++) {
+    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
+    if (hit) { 
+      return;
+    }
+  }
+  int replace_set = random() % m_assoc;
+  /* write new block into the cache */
+  set[replace_set].address_state = ba | CACHE_BLK_VALID;
+}
+
+
+
+
 #endif  /* _CACHE_H_ */
diff -X dontdiff -uprN gems-2.1.1/opal/system/config.include gems-2.1.1-hwpq-dev/opal/system/config.include
--- gems-2.1.1/opal/system/config.include	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/config.include	2011-02-08 12:23:41.000000000 -0500
@@ -81,6 +81,14 @@ PARAM_UINT( DL1_MSHR_ENTRIES );
 PARAM_UINT( DL1_STREAM_BUFFERS );
 PARAM_UINT( DL1_IDEAL );
 
+// L1 hwds cache
+PARAM_UINT( HL1_ASSOC );
+PARAM_UINT( HL1_SET_BITS );
+PARAM_UINT( HL1_BLOCK_BITS );
+PARAM_UINT( HL1_MSHR_ENTRIES );
+PARAM_UINT( HL1_STREAM_BUFFERS );
+PARAM_UINT( HL1_IDEAL );
+
 // L2 unified cache
 PARAM_UINT( L2_ASSOC );
 PARAM_UINT( L2_SET_BITS );
diff -X dontdiff -uprN gems-2.1.1/opal/system/dx.i gems-2.1.1-hwpq-dev/opal/system/dx.i
--- gems-2.1.1/opal/system/dx.i	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/dx.i	2011-02-08 13:54:12.000000000 -0500
@@ -3423,8 +3423,74 @@ DX_RETURNT dx__trap( DX_PLIST ) {
 
 DX_RETURNT dx_impdep1( DX_PLIST ) {
 }
+// GAB: Add the hw priority queue impdep2 instruction
+
+// TODO: dynamically allocate these elsewhere (pseq)
+#include "hwpq.h"
+hwpq_t queues[10];
 
 DX_RETURNT dx_impdep2( DX_PLIST ) {
+  // check the immediate bit
+  if (getStaticInst()->getFlag(SI_ISIMMEDIATE)) {
+    // the old hwpq implementation used the immediate insn encoding
+    // the new implementation uses two source registers.
+      m_pseq->out_info("Unimplemented instruction: 0x%0x\n",
+                getStaticInst()->getInst());
+  }
+  else {
+    hwpq_node_t *node;
+    hwpq_node_t *new_node = NULL;
+    int queue_idx = 0;
+    int operation = 0;
+    int priority = 0;
+    uint64 payload = 0;
+
+    payload = SOURCE1;
+    queue_idx = maskBits32(S2ORI,31,20);
+    priority = maskBits32(S2ORI,19,4);
+    operation = maskBits32(S2ORI,3,0);
+
+    // check if requested queue is resident
+
+    // get the current size and limit of queue
+
+
+    switch ( operation ) {
+
+      case 1: // first
+      node = queues[queue_idx].first();
+      if (node) {
+        IREGISTER result = node->payload;
+        WRITE_DEST(result);
+      } else {
+        WRITE_DEST(0);
+      }
+      break;
+
+      case 2: // enqueue
+        new_node = new hwpq_node_t(priority, payload);
+//        new_node = (pq_node*)malloc(sizeof(pq_node));
+        if (!new_node) {
+          printf("Unable to allocate space for new pq node\n");
+          break; // should throw exception
+        }
+        queues[queue_idx].insert(new_node);
+        new_node = NULL;
+        WRITE_DEST(0);
+        break;
+
+      case 3: // extract
+        node = queues[queue_idx].extract(payload);
+        if (node)
+          delete node;
+        WRITE_DEST(0);
+        break;
+
+      default:
+        printf("Unknown operation: %d\n", operation);
+          break; // should throw exception
+    }
+  }
 }
 
 DX_RETURNT dx_membar( DX_PLIST ) {
diff -X dontdiff -uprN gems-2.1.1/opal/system/hwpq.C gems-2.1.1-hwpq-dev/opal/system/hwpq.C
--- gems-2.1.1/opal/system/hwpq.C	1969-12-31 19:00:00.000000000 -0500
+++ gems-2.1.1-hwpq-dev/opal/system/hwpq.C	2011-02-08 14:04:17.000000000 -0500
@@ -0,0 +1,69 @@
+/*
+ * FileName:  hwpq.C
+ * Synopsis:  Implements a hardware priority queue
+ * Author:    gedare
+ * Version:   $Id$
+ */
+
+/*------------------------------------------------------------------------*/
+/* Includes                                                               */
+/*------------------------------------------------------------------------*/
+
+#include "hfa.h"
+#include "hfacore.h"
+
+#include "hwpq.h"
+#include <stdio.h>
+#include <vector>
+
+void hwpq_t::print_queue() {
+  vector<hwpq_node_t *>::iterator i;
+  for (i = m_pq.begin(); i != m_pq.end(); i++ )
+    (*i)->print_node();
+}
+
+hwpq_node_t* hwpq_t::first() {
+#ifdef GAB_DEBUG
+  printf("pq_first:\n");
+  print_queue();
+#endif
+  return m_pq.front();
+}
+
+hwpq_node_t* hwpq_t::extract(uint64 data)
+{
+  vector< hwpq_node_t * >::iterator i;
+  hwpq_node_t *node;
+
+  /* search for data in pq */
+  for ( i = m_pq.begin(); i != m_pq.end(); i++ ) {
+    if ((*i)->payload == data) break;
+  }
+
+  if (i != m_pq.end()) { /* found data */
+    node = *i;
+    m_pq.erase( i );
+    if (is_ascending())
+      make_heap( m_pq.begin(), m_pq.end(), hwpq_node_heap_min_compare() );
+    else
+      make_heap( m_pq.begin(), m_pq.end(), hwpq_node_heap_max_compare() );
+  }
+#ifdef GAB_DEBUG
+  printf("pq_extract:\n");
+  print_queue();
+#endif
+  return node;
+}
+
+void hwpq_t::insert(hwpq_node_t *node) 
+{
+  m_pq.push_back(node);
+  if (is_ascending())
+    push_heap( m_pq.begin(), m_pq.end(), hwpq_node_heap_min_compare() );
+  else
+    push_heap( m_pq.begin(), m_pq.end(), hwpq_node_heap_max_compare() );
+#ifdef GAB_DEBUG
+  printf("pq_insert\n");
+  print_queue();
+#endif
+}
diff -X dontdiff -uprN gems-2.1.1/opal/system/hwpq.h gems-2.1.1-hwpq-dev/opal/system/hwpq.h
--- gems-2.1.1/opal/system/hwpq.h	1969-12-31 19:00:00.000000000 -0500
+++ gems-2.1.1-hwpq-dev/opal/system/hwpq.h	2011-02-08 13:57:46.000000000 -0500
@@ -0,0 +1,157 @@
+/*
+ * hwpq.h
+ *
+ * A priority queue supporting:
+ *  enqueue
+ *  extract
+ *  first (peek)
+ * For modelling a HW PQ.  
+ */
+
+#ifndef _HWPQ_H_
+#define _HWPQ_H_
+
+/*------------------------------------------------------------------------*/
+/* Includes                                                               */
+/*------------------------------------------------------------------------*/
+
+#include <vector>
+#include <stdio.h>
+
+/*------------------------------------------------------------------------*/
+/* Macro declarations                                                     */
+/*------------------------------------------------------------------------*/
+
+//#define GAB_DEBUG
+
+/*------------------------------------------------------------------------*/
+/* Class declaration(s)                                                   */
+/*------------------------------------------------------------------------*/
+
+class hwpq_node_t {
+  public:
+    hwpq_node_t(int priority, uint64 payload) {
+      this->priority = priority;
+      this->payload = payload;
+    }
+
+    /** Print a node */
+    void print_node() { printf("%d\t%llu\n",priority,payload); }
+
+    /**
+     * @name Accessor(s) / mutator(s)
+     */
+    int get_priority() { return priority; }
+    uint64 get_payload() { return payload; }
+    void set_priority(int p) { priority = p; }
+    void set_payload(uint64 p) { payload = p; }
+
+    // should be private, but makes comparisons harder.
+    int priority;
+    uint64 payload;
+};
+
+/**
+* A priority queue implemented in hardware. It is a simple linked list in 
+* the simulator.
+*
+*
+* @see    
+* @author  gedare
+* @version $Id$
+*/
+class hwpq_t {
+
+public:
+
+  /**
+   * @name Constructor(s) / destructor
+   */
+  //@{
+
+  /** Default Constructor */
+  hwpq_t() {
+    m_pq_is_ascending = true;
+  }
+
+  /**
+   * Constructor: creates object
+   * @param is_ascending true if low priority value means high priority level
+   */
+  hwpq_t(bool is_ascending) {
+    m_pq_is_ascending = is_ascending;    
+  }
+
+  /**
+   * Destructor: frees object.
+   */
+  ~hwpq_t() { ; };
+  //@}
+
+  /**
+   * @name Methods
+   */
+  //@{
+
+  /** Retrieve first (highest priority) element */
+  hwpq_node_t* first();
+
+  /** Extract an element with given payload */
+  hwpq_node_t* extract(uint64 payload);
+
+  /** Insert an element with given priority and payload */
+  void insert(hwpq_node_t* node);
+
+  /** Print the queue */
+  void print_queue();
+
+  /** Compare two elements on the queue (used to create a max heap with STL) */
+  class hwpq_node_heap_max_compare {
+    public:
+      bool operator() ( const hwpq_node_t *a, const hwpq_node_t *b ) const {
+        return a->priority < b->priority;
+      }
+  };
+
+  /** Compare two elements on the queue (used to create a min heap with STL) */
+  class hwpq_node_heap_min_compare {
+    public:
+      bool operator() ( const hwpq_node_t *a, const hwpq_node_t *b ) const {
+        return a->priority > b->priority;
+      }
+  };
+
+  bool is_ascending() {
+    return m_pq_is_ascending;
+  }
+
+  //@}
+
+  /**
+   * @name Accessor(s) / mutator(s)
+   */
+  //@{
+  /**
+   * [Memo].
+   *
+   * [Documentation]
+   * @param param1 [Description of what param1 is]
+   * @return [Description of return value]
+   */
+  //@}
+
+private:
+  /// class member
+  vector<hwpq_node_t *> m_pq;
+  bool m_pq_is_ascending;
+};
+
+/*------------------------------------------------------------------------*/
+/* Global variables                                                       */
+/*------------------------------------------------------------------------*/
+
+/*------------------------------------------------------------------------*/
+/* Global functions                                                       */
+/*------------------------------------------------------------------------*/
+
+#endif /* _HWPQ_H_ */
diff -X dontdiff -uprN gems-2.1.1/opal/system/ix.i gems-2.1.1-hwpq-dev/opal/system/ix.i
--- gems-2.1.1/opal/system/ix.i	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/ix.i	2011-01-10 12:48:11.000000000 -0500
@@ -3426,6 +3426,7 @@ DX_RETURNT dx_impdep1( DX_PLIST ) {
 }
 
 DX_RETURNT dx_impdep2( DX_PLIST ) {
+  DEBUG_OUT("ix:dx_impdep2\n");
 }
 
 DX_RETURNT dx_membar( DX_PLIST ) {
diff -X dontdiff -uprN gems-2.1.1/opal/system/pseq.C gems-2.1.1-hwpq-dev/opal/system/pseq.C
--- gems-2.1.1/opal/system/pseq.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/pseq.C	2011-02-08 12:13:04.000000000 -0500
@@ -193,8 +193,10 @@ pseq_t::pseq_t( int32 id )
   l2_cache              = NULL;
   il1_mshr              = NULL;
   dl1_mshr              = NULL;
+  hl1_mshr              = NULL;
   l1_inst_cache         = NULL;
   l1_data_cache         = NULL;
+  l1_hwds_cache         = NULL;
   m_ruby_cache          = NULL;
   
  /* WATTCH power */
@@ -424,6 +426,10 @@ pseq_t::pseq_t( int32 id )
                           DL1_BLOCK_BITS, L2_LATENCY, L1_FILL_BUS_CYCLES,
                           DL1_MSHR_ENTRIES, DL1_STREAM_BUFFERS);
     
+    hl1_mshr = new mshr_t("HL1.mshr", l2_cache, m_scheduler,
+                          HL1_BLOCK_BITS, L2_LATENCY, L1_FILL_BUS_CYCLES,
+                          HL1_MSHR_ENTRIES, HL1_STREAM_BUFFERS);
+    
     /* first level instruction caches */  
     l1_inst_cache = new generic_cache_template<generic_cache_block_t>(
                       "L1.inst", il1_mshr, m_scheduler, IL1_SET_BITS,
@@ -433,6 +439,11 @@ pseq_t::pseq_t( int32 id )
     l1_data_cache = new generic_cache_template<generic_cache_block_t>(
                       "L1.data", dl1_mshr, m_scheduler, DL1_SET_BITS,
                       DL1_ASSOC, DL1_BLOCK_BITS, (DL1_IDEAL != 0) );
+
+    /* first level hwds caches */  
+    l1_hwds_cache = new generic_cache_template<generic_cache_block_t>(
+                      "L1.hwds", hl1_mshr, m_scheduler, HL1_SET_BITS,
+                      HL1_ASSOC, HL1_BLOCK_BITS, (HL1_IDEAL != 0) );
   } else {
     /* CONFIG_WITH_RUBY  */
     m_ruby_cache = new rubycache_t( m_id, L2_BLOCK_BITS, m_scheduler );
@@ -769,12 +780,16 @@ pseq_t::~pseq_t() {
     delete l1_inst_cache;
   if (l1_data_cache)
     delete l1_data_cache;
+  if (l1_hwds_cache)
+    delete l1_hwds_cache;
   if (l2_cache)
     delete l2_cache;
   if (il1_mshr)
     delete il1_mshr;
   if (dl1_mshr)
     delete dl1_mshr;
+  if (hl1_mshr)
+    delete hl1_mshr;
   if (l2_mshr)
     delete l2_mshr;
   
@@ -1333,6 +1348,7 @@ void pseq_t::advanceCycle( void )
     // then tick L1
     il1_mshr->Tick();
     dl1_mshr->Tick();
+    hl1_mshr->Tick();
   }
 
   // advance local time one cycle (do this only after all threads have finished going through pipeline)
@@ -7335,6 +7351,9 @@ void pseq_t::printStats( void )
     dl1_mshr->printStats( this );
     l1_inst_cache->printStats( this );
     il1_mshr->printStats( this );
+    l1_hwds_cache->printStats( this );
+    hl1_mshr->printStats( this );
+
   }
 
   //print out SMT icount stats
diff -X dontdiff -uprN gems-2.1.1/opal/system/pseq.h gems-2.1.1-hwpq-dev/opal/system/pseq.h
--- gems-2.1.1/opal/system/pseq.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/pseq.h	2011-02-08 12:15:11.000000000 -0500
@@ -1219,11 +1219,14 @@ private:
   /// L1 miss status holding register structure
   mshr_t      *il1_mshr;
   mshr_t      *dl1_mshr;
+  mshr_t      *hl1_mshr;
 
   /// L1 instruction cache
   generic_cache_template<generic_cache_block_t> *l1_inst_cache;
   /// L1 data cache
   generic_cache_template<generic_cache_block_t> *l1_data_cache;
+  /// L1 hwds cache
+  generic_cache_template<generic_cache_block_t> *l1_hwds_cache;
 
   /// L2 miss status holding register structure
   mshr_t      *l2_mshr;
diff -X dontdiff -uprN gems-2.1.1/opal/system/statici.C gems-2.1.1-hwpq-dev/opal/system/statici.C
--- gems-2.1.1/opal/system/statici.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/statici.C	2011-01-10 12:48:11.000000000 -0500
@@ -2869,6 +2869,11 @@ static_inst_t::decodeInstructionInfo( pa
       break;
 
     case 55:  // impdep2
+      // GAB: Interpret the impdep2 instruction
+
+      REG_TWO_I( 12 );    // decode two-reg with either rs2 or imm
+      m_futype = FU_IMPDEP2; // need a function unit to order accesses..
+
       m_opcode = i_impdep2;
       break;
 
diff -X dontdiff -uprN gems-2.1.1/opal/system/system.C gems-2.1.1-hwpq-dev/opal/system/system.C
--- gems-2.1.1/opal/system/system.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwpq-dev/opal/system/system.C	2011-01-10 12:47:58.000000000 -0500
@@ -183,6 +183,9 @@ static void system_exception_handler( vo
 static void system_exception_tracer( void *obj, conf_object_t *proc,
                                      uint64 exception );
 
+#include <signal.h>
+static void system_signalint(int sig);
+
 // C++ Template: explicit instantiation
 template class map<breakpoint_id_t, breakpoint_action_t *>;
 
@@ -218,6 +221,9 @@ system_t::system_t( const char *configur
   m_sim_status = SIMSTATUS_BREAK;
   sprintf( m_sim_message_buffer, "situation nominal" );
 
+  // register sigint handler
+  signal( SIGINT, system_signalint );
+
   // establish opal ruby api (see ruby/interfaces/mf_api.h & ruby/interfaces/OpalInterface.C)
   m_opal_api = &hfa_ruby_interface;
   m_opal_api->hitCallback    = &system_t::rubyCompletedRequest;
@@ -362,7 +368,7 @@ system_breakpoint( void *data, conf_obje
   }
  
   //currently IGNORE the system_breakpoint (parameter = 0x4000)...
-  #if 0
+  #if 1
   ERROR_OUT("system_t::system_breakpoint REACHED param[ 0x%x ]\n", parameter);
 
   sprintf( system_t::inst->m_sim_message_buffer,
@@ -373,6 +379,15 @@ system_breakpoint( void *data, conf_obje
 }
 
 //***************************************************************************
+static void
+system_signalint( int sig )
+{
+   signal( sig, SIG_IGN ); //ignore the signal
+   HALT_SIMULATION;
+   signal( SIGINT, system_signalint ); // re-register signal
+}
+
+//***************************************************************************
 void system_t::simulate( uint64 instrCount )
 {
   //  
diff -X dontdiff -uprN gems-2.1.1/ruby/common/Debug.C gems-2.1.1-hwpq-dev/ruby/common/Debug.C
--- gems-2.1.1/ruby/common/Debug.C	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwpq-dev/ruby/common/Debug.C	2011-01-10 12:47:58.000000000 -0500
@@ -66,6 +66,7 @@
 #include "Debug.h"
 #include "EventQueue.h"
 
+#include "string.h"
 class Debug;
 extern Debug* g_debug_ptr;
 std::ostream * debug_cout_ptr;
diff -X dontdiff -uprN gems-2.1.1/ruby/log_tm/LazyTransactionVersionManager.C gems-2.1.1-hwpq-dev/ruby/log_tm/LazyTransactionVersionManager.C
--- gems-2.1.1/ruby/log_tm/LazyTransactionVersionManager.C	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwpq-dev/ruby/log_tm/LazyTransactionVersionManager.C	2011-01-10 12:47:58.000000000 -0500
@@ -280,8 +280,9 @@ void LazyTransactionVersionManager::issu
       should_escape = true;
     }
 
-    CacheMsg storeMsg(Address(request_address),
-                      Address(request_address),
+    Address ad(request_address);
+    CacheMsg storeMsg(ad,
+                      ad,
                       CacheRequestType_ST_XACT,    
                       SIMICS_get_program_counter(getLogicalProcID(thread)),
                       AccessModeType_UserMode,
diff -X dontdiff -uprN gems-2.1.1/ruby/system/CacheMemory.h gems-2.1.1-hwpq-dev/ruby/system/CacheMemory.h
--- gems-2.1.1/ruby/system/CacheMemory.h	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwpq-dev/ruby/system/CacheMemory.h	2011-01-10 12:47:58.000000000 -0500
@@ -78,6 +78,7 @@
 #include "PseudoLRUPolicy.h"
 #include "LRUPolicy.h"
 #include <vector>
+#include "string.h"
 
 template<class ENTRY>
 class CacheMemory {
diff -X dontdiff -uprN gems-2.1.1/scripts/makesymlinks.sh gems-2.1.1-hwpq-dev/scripts/makesymlinks.sh
--- gems-2.1.1/scripts/makesymlinks.sh	2010-09-01 14:06:12.000000000 -0400
+++ gems-2.1.1-hwpq-dev/scripts/makesymlinks.sh	2011-01-10 12:48:37.000000000 -0500
@@ -22,7 +22,7 @@ cd ../..
 # in your Simics 3 install
 echo "Making symlink for import directory..."
 #ln -s /simics-3.0.11/import import
-ln -s /p/multifacet/projects/simics/simics-3.0.11/import import
+ln -s ${SIMICS_INSTALL}/import import
 
 echo "Making symlinks for modules..."
 cd modules
