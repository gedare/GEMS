diff -X dontdiff -uprN gems-2.1.1/common/Makefile.common gems-2.1.1-hwds2/common/Makefile.common
--- gems-2.1.1/common/Makefile.common	2010-09-01 14:06:12.000000000 -0400
+++ gems-2.1.1-hwds2/common/Makefile.common	2010-09-28 22:37:08.000000000 -0400
@@ -56,11 +56,11 @@ ifeq ($(SIMICS_VERSION),2.2.X)
   SIMICS_INCLUDE_ROOT := /dev/null22
 else
 ifeq ($(SIMICS_VERSION),3.0)
-  SIMICS_ROOT := /dev/null30
+  SIMICS_ROOT := $(GEMS_ROOT)/simics
   SIMICS_EXEC_ROOT := $(GEMS_ROOT)/simics
   # NOTE: This variable must be updated to point to the src/include directory
   # of your Simics 3.0 installation
-  SIMICS_INCLUDE_ROOT := $(GEMS_ROOT)/simics/src/include
+  SIMICS_INCLUDE_ROOT := $(SIMICS_INSTALL)/src/include
 else
   SIMICS_ROOT := /dev/blah
   SIMICS_EXEC_ROOT := /dev/foo
@@ -98,7 +98,7 @@ LFLAGS := 
 CC_VERSION=3.4.4
 
 ifeq ($(HOST_TYPE),amd64-linux)
-  CC =  /s/gcc-3.4.4/bin/g++
+  CC =  /usr/bin/g++
   #CC =  /usr/bin/g++
   OPT_FLAGS = -m64 -march=opteron -fPIC
   LDFLAGS += -ggdb -g3 -Wl,-R/s/gcc-3.4.4/lib64 
@@ -106,14 +106,14 @@ ifeq ($(HOST_TYPE),amd64-linux)
 
 else
 ifeq ($(HOST_TYPE),v9-sol8-64)
-  # CC = purify -best-effort -leaks-at-exit=yes -chain-length="15" /s/gcc-3.4.1/bin/g++ -static
+  # CC = purify -best-effort -leaks-at-exit=yes -chain-length="15" /usr/bin/g++ -static
   # CC = /s/gcc-3.4.3/bin/g++ -I/s/getopt-0/include
   CC = g++ -I/s/getopt-0/include
   OPT_FLAGS = -m64 -mcpu=v9 -DUSE_DIRENT
   LDFLAGS += -m64 -L/s/getopt-0/lib -lgetopt
 else
 ifeq ($(HOST_TYPE),x86-linux)
-  CC =  /s/gcc-3.4.1/bin/g++
+  CC =  /usr/bin/g++
   #CC =  /usr/bin/g++
   OPT_FLAGS = -march=i686
   LDFLAGS += -ggdb -g3
diff -X dontdiff -uprN gems-2.1.1/opal/common/debugio.C gems-2.1.1-hwds2/opal/common/debugio.C
--- gems-2.1.1/opal/common/debugio.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/common/debugio.C	2010-09-28 22:36:47.000000000 -0400
@@ -169,6 +169,7 @@ void out_intf_t::setDebugTime(uint64 t)
 //**************************************************************************
 bool out_intf_t::validDebug( void )
 {
+  return true; /* gem-users: 2008-September/msg00013.shtml */
   if ( m_starting_cycle > system_t::inst->getGlobalCycle() ) {
     return false;
   }
diff -X dontdiff -uprN gems-2.1.1/opal/config/config.defaults gems-2.1.1-hwds2/opal/config/config.defaults
--- gems-2.1.1/opal/config/config.defaults	2010-09-01 14:06:14.000000000 -0400
+++ gems-2.1.1-hwds2/opal/config/config.defaults	2010-09-28 22:36:47.000000000 -0400
@@ -194,7 +194,7 @@ CHAIN_MP_MODE: 1
 //
 // WATTCH power analysis
 //
-WATTCH_POWER: 0
+WATTCH_POWER: 1
 PREFETCHER_POWER: 1
 COMPRESSION_POWER: 0
 //Used to simulate clock-gating of L1 banks
diff -X dontdiff -uprN gems-2.1.1/opal/system/cache.C gems-2.1.1-hwds2/opal/system/cache.C
--- gems-2.1.1/opal/system/cache.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/cache.C	2010-09-28 22:36:47.000000000 -0400
@@ -360,57 +360,6 @@ pa_t generic_cache_template<BlockType>::
 
 #endif
 
-//**************************************************************************
-template <class BlockType>
-void generic_cache_template<BlockType>::Warmup(pa_t a) {
-
-  uint32 index = Set(a);
-  pa_t ba = BlockAddress(a);
-  ASSERT(index < n_sets);
-
-  /* search all sets until we find a match */
-  BlockType *set = &cache[index * m_assoc];
-  for (uint32 i = 0 ; i < m_assoc ; i ++) {
-    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
-    if (hit) { 
-      return;
-    }
-  }
-  int replace_set = random() % m_assoc;
-  /* write new block into the cache */
-  set[replace_set].address_state = ba | CACHE_BLK_VALID;
-}
-
-//**************************************************************************
-template <class BlockType>
-void generic_cache_template<BlockType>::OracleAccess(pa_t a) {
-  /* used when we want the execution of a particular load or store to
-   * be prefetched perfectly.
-   */
-  uint32 index = Set(a);
-  pa_t ba = BlockAddress(a);
-  ASSERT(index < n_sets);
-  STAT_INC(reads);
-
-  /* search all sets until we find a match */
-  BlockType *set = &cache[index * m_assoc];
-  int replace_set = 0;
-  for (uint32 i = 0 ; i < m_assoc ; i ++) {
-    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
-    if (hit) { 
-      STAT_INC(read_hit);
-      return;
-    } 
-    if (set[i].last_access < set[replace_set].last_access) {
-      replace_set = i;
-    }
-  }
-
-  /* write new block into the cache */
-  STAT_INC(read_miss);
-  set[replace_set].address_state = ba | CACHE_BLK_VALID;
-  set[replace_set].last_access = m_eventQueue->getCycle();
-}
 
 //**************************************************************************
 /* this function is called when a store is retired.  If the address
@@ -568,18 +517,6 @@ set_error_t generic_cache_template<Block
   return Sim_Set_Ok;
 }
 
-//**************************************************************************
-template <class BlockType>
-int generic_cache_template<BlockType>::registerCheckpoint( confio_t *conf )
-{
-  int rc;
-
-  rc = conf->register_attribute( name,
-                                 generic_cache_template<BlockType>::get_cache_data, (void *) this,
-                                 generic_cache_template<BlockType>::set_cache_data, (void *) this );
-  return rc;
-}
-
 /*------------------------------------------------------------------------*/
 /* Accessor(s) / mutator(s)                                               */
 /*------------------------------------------------------------------------*/
diff -X dontdiff -uprN gems-2.1.1/opal/system/cache.h gems-2.1.1-hwds2/opal/system/cache.h
--- gems-2.1.1/opal/system/cache.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/cache.h	2010-09-28 22:36:47.000000000 -0400
@@ -59,6 +59,7 @@
 
 #include "mshr.h"
 #include "scheduler.h"
+#include "confio.h"
 
 /*------------------------------------------------------------------------*/
 /* Macro declarations                                                     */
@@ -240,7 +241,7 @@ public:
   bool Read(pa_t a, waiter_t *w, bool data_request = true,
             bool *primary_bool = NULL){
     /* always hit if ideal */
-    if(m_ideal) return true;
+    if(m_ideal || (gab_flag & GAB_NO_CACHE)) return true;
     
     BlockType *b;
     bool hit = TagSearch( a, true, false, &b, NULL );
@@ -267,7 +268,7 @@ public:
 
   bool Write(pa_t a, waiter_t *w){
     /* always hit if ideal */
-    if(m_ideal) return true;
+    if(m_ideal || (gab_flag & GAB_NO_CACHE)) return true;
     
     BlockType *b;
     bool hit = TagSearch( a, true, true, &b, NULL );
@@ -473,4 +474,72 @@ protected:
 /* Global functions                                                       */
 /*------------------------------------------------------------------------*/
 
+/* workaround see: https://lists.cs.wisc.edu/archive/gems-users/2009-March/msg00116.shtml */
+//**************************************************************************
+template <class BlockType>
+int generic_cache_template<BlockType>::registerCheckpoint( confio_t *conf )
+{
+  int rc;
+
+  rc = conf->register_attribute( name,
+                                 generic_cache_template<BlockType>::get_cache_data, (void *) this,
+                                 generic_cache_template<BlockType>::set_cache_data, (void *) this );
+  return rc;
+}
+
+//**************************************************************************
+template <class BlockType>
+void generic_cache_template<BlockType>::OracleAccess(pa_t a) {
+  /* used when we want the execution of a particular load or store to
+   * be prefetched perfectly.
+   */
+  uint32 index = Set(a);
+  pa_t ba = BlockAddress(a);
+  ASSERT(index < n_sets);
+  STAT_INC(reads);
+
+  /* search all sets until we find a match */
+  BlockType *set = &cache[index * m_assoc];
+  int replace_set = 0;
+  for (uint32 i = 0 ; i < m_assoc ; i ++) {
+    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
+    if (hit) { 
+      STAT_INC(read_hit);
+      return;
+    } 
+    if (set[i].last_access < set[replace_set].last_access) {
+      replace_set = i;
+    }
+  }
+
+  /* write new block into the cache */
+  STAT_INC(read_miss);
+  set[replace_set].address_state = ba | CACHE_BLK_VALID;
+  set[replace_set].last_access = m_eventQueue->getCycle();
+}
+
+//**************************************************************************
+template <class BlockType>
+void generic_cache_template<BlockType>::Warmup(pa_t a) {
+
+  uint32 index = Set(a);
+  pa_t ba = BlockAddress(a);
+  ASSERT(index < n_sets);
+
+  /* search all sets until we find a match */
+  BlockType *set = &cache[index * m_assoc];
+  for (uint32 i = 0 ; i < m_assoc ; i ++) {
+    bool hit = IsValid(set[i]) && (getBlockAddress(set[i]) == ba);
+    if (hit) { 
+      return;
+    }
+  }
+  int replace_set = random() % m_assoc;
+  /* write new block into the cache */
+  set[replace_set].address_state = ba | CACHE_BLK_VALID;
+}
+
+
+
+
 #endif  /* _CACHE_H_ */
diff -X dontdiff -uprN gems-2.1.1/opal/system/dx.i gems-2.1.1-hwds2/opal/system/dx.i
--- gems-2.1.1/opal/system/dx.i	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/dx.i	2010-09-28 22:36:47.000000000 -0400
@@ -87,7 +87,7 @@
 // To track power when wrtting physical bits to regfile or on result bus
 #ifdef DYNAMIC_AF
 #define WATTCH_WRITE_DEST( A )                            \
-     if(WATTCH_POWER){   \
+     if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){   \
        m_pseq->getPowerStats()->incrementRegfileTotalPopCount(m_pseq->getPowerStats()->pop_count(A)); \
        m_pseq->getPowerStats()->incrementRegfileNumPopCount();     \
        m_pseq->getPowerStats()->incrementResultBusTotalPopCount(m_pseq->getPowerStats()->pop_count(A));       \
@@ -104,7 +104,7 @@
 
 // To track power when  trasferring a register value stored in Instruction window to Functional unit
 #define WATTCH_READ_SOURCE \
-      if(WATTCH_POWER){         \
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){         \
           m_pseq->getPowerStats()->incrementWinPregAccess(); \
      }
       
diff -X dontdiff -uprN gems-2.1.1/opal/system/dynamic.C gems-2.1.1-hwds2/opal/system/dynamic.C
--- gems-2.1.1/opal/system/dynamic.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/dynamic.C	2010-09-28 22:36:47.000000000 -0400
@@ -253,7 +253,7 @@ dynamic_inst_t::Decode( uint64 issueTime
     source.getARF()->readDecodeMap( source, m_proc );    
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementRegfileAccess();
     }
   }
@@ -262,7 +262,7 @@ dynamic_inst_t::Decode( uint64 issueTime
   allocateDestRegs();
 
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_pseq->getPowerStats()->incrementRenameAccess();
   }
 
@@ -441,7 +441,7 @@ dynamic_inst_t::Schedule() { 
       SetStage(WAIT_3RD_STAGE);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         m_pseq->getPowerStats()->incrementWindowAccess();
       }
     }
@@ -482,7 +482,7 @@ dynamic_inst_t::Schedule() { 
       SetStage(WAIT_2ND_STAGE);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         m_pseq->getPowerStats()->incrementWindowAccess();
       }
     }
@@ -523,7 +523,7 @@ dynamic_inst_t::Schedule() { 
       SetStage(WAIT_1ST_STAGE);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         m_pseq->getPowerStats()->incrementWindowAccess();
       }
     }
@@ -564,7 +564,7 @@ dynamic_inst_t::Schedule() { 
       SetStage(READY_STAGE);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         m_pseq->getPowerStats()->incrementWindowAccess();
       }
     }
@@ -578,7 +578,7 @@ dynamic_inst_t::Schedule() { 
     m_event_times[EVENT_TIME_OPERANDS_READY] = m_pseq->getLocalCycle() - m_fetch_cycle;
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementWindowAccess();
       m_pseq->getPowerStats()->incrementWinSelectionAccess();
     }
@@ -1100,7 +1100,7 @@ dynamic_inst_t::retireRegisters() {
       //       at this point.
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         m_pseq->getPowerStats()->incrementRegfileAccess();
         m_pseq->getPowerStats()->incrementResultBusAccess();
         m_pseq->getPowerStats()->incrementWinWakeupAccess();
@@ -1722,7 +1722,7 @@ void   dynamic_inst_t::nextPC_call( abst
                                       &m_pseq->m_branch_except_stat[s->getBranchType()], m_proc);
 
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_pseq->getPowerStats()->incrementBpredAccess();
   }
 
@@ -1839,7 +1839,7 @@ void   dynamic_inst_t::nextPC_predicated
                               s->getFlag(SI_STATICPRED) , m_proc );
 
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_pseq->getPowerStats()->incrementBpredAccess();
   }
 
@@ -1891,7 +1891,7 @@ void   dynamic_inst_t::nextPC_predict_br
                                    s->getFlag(SI_STATICPRED), m_proc );
 
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_pseq->getPowerStats()->incrementBpredAccess();
   }
 
@@ -1941,7 +1941,7 @@ void   dynamic_inst_t::nextPC_indirect( 
                                       &m_pseq->m_branch_except_stat[s->getBranchType()] , m_proc);
 
   /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementBpredAccess();
     }
 
diff -X dontdiff -uprN gems-2.1.1/opal/system/ix.i gems-2.1.1-hwds2/opal/system/ix.i
--- gems-2.1.1/opal/system/ix.i	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/ix.i	2010-09-28 22:36:47.000000000 -0400
@@ -87,7 +87,7 @@
 // To track power when wrtting physical bits to regfile or on result bus
 #ifdef DYNAMIC_AF
 #define WATTCH_WRITE_DEST( A )                            \
-     if(WATTCH_POWER){   \
+     if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){   \
        m_pseq->getPowerStats()->incrementRegfileTotalPopCount(m_pseq->getPowerStats()->pop_count(A)); \
        m_pseq->getPowerStats()->incrementRegfileNumPopCount();     \
        m_pseq->getPowerStats()->incrementResultBusTotalPopCount(m_pseq->getPowerStats()->pop_count(A));       \
@@ -104,7 +104,7 @@
 
 // To track power when  trasferring a register value stored in Instruction window to Functional unit
 #define WATTCH_READ_SOURCE \
-      if(WATTCH_POWER){         \
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){         \
           m_pseq->getPowerStats()->incrementWinPregAccess(); \
      }
       
diff -X dontdiff -uprN gems-2.1.1/opal/system/memop.C gems-2.1.1-hwds2/opal/system/memop.C
--- gems-2.1.1/opal/system/memop.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/memop.C	2010-09-28 22:36:47.000000000 -0400
@@ -152,7 +152,7 @@ memory_inst_t::Squash() {
     m_pseq->getLSQ(m_proc)->remove( this );
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementLSQAccess();
     }
   }
@@ -244,7 +244,7 @@ memory_inst_t::Retire( abstract_pc_t *a 
     m_pseq->getLSQ(m_proc)->remove( this );
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementLSQAccess();
     }
   }
@@ -725,7 +725,7 @@ load_inst_t::Execute() {
 
     //charge for LSQ power before the if(), because we might return 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementLSQAccess();
       m_pseq->getPowerStats()->incrementLSQWakeupAccess();
     }
@@ -824,7 +824,7 @@ load_inst_t::lsqBypass( void ) {
   ASSERT(m_depend->getStoreValueReady());
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementLSQAccess();
       m_pseq->getPowerStats()->incrementLSQLoadDataAccess();
       m_pseq->getPowerStats()->incrementLSQPregAccess();
@@ -843,7 +843,7 @@ load_inst_t::lsqBypass( void ) {
       m_data_storage[i] = m_depend->getData()[i];
       
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
 #ifdef DYNAMIC_AF
         //charge power to write back some bits to the dest register
         // process each chunk of data read at a time
@@ -1067,7 +1067,7 @@ load_inst_t::accessCache( void ) {
      */
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
@@ -1193,7 +1193,7 @@ load_inst_t::doCacheRetirement(void){
      */
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
@@ -1486,7 +1486,7 @@ store_inst_t::storeDataToCache( void ) {
 
   //charge for the data being written to the LSQ here, bc the data wasn't available earlier
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
      #ifdef DYNAMIC_AF
             m_pseq->getPowerStats()->incrementLSQNumPopCount();  
      #endif
@@ -1506,7 +1506,7 @@ store_inst_t::storeDataToCache( void ) {
       m_data_storage[i] = source.getARF()->readInt64( source, m_proc );   
       
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
 #ifdef DYNAMIC_AF
         //charge power to write back some bits to the lsq entry
         // process each chunk of data read at a time
@@ -1643,7 +1643,7 @@ store_inst_t::Execute() {
     
     //charge for LSQ access before the if() because we might return
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementLSQAccess();
       m_pseq->getPowerStats()->incrementLSQStoreDataAccess();
       m_pseq->getPowerStats()->incrementLSQPregAccess();
@@ -1851,7 +1851,7 @@ store_inst_t::accessCache( void ) {
     // check the cache for presence of this line
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
@@ -1942,7 +1942,7 @@ store_inst_t::doCacheRetirement(void){ 
     // check the cache for presence of this line
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
@@ -2071,7 +2071,7 @@ atomic_inst_t::lsqBypass( void ) {
   ASSERT(m_depend->getStoreValueReady());
 
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_pseq->getPowerStats()->incrementLSQAccess();
   }
   
@@ -2376,7 +2376,7 @@ prefetch_inst_t::accessCache( void ) {
     /* do a demand prefetch to the cache hierarchy */
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
@@ -2429,7 +2429,7 @@ prefetch_inst_t::doCacheRetirement(){
     /* do a demand prefetch to the cache hierarchy */
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       m_pseq->getPowerStats()->incrementDCacheAccess();
     }
 
diff -X dontdiff -uprN gems-2.1.1/opal/system/pseq.C gems-2.1.1-hwds2/opal/system/pseq.C
--- gems-2.1.1/opal/system/pseq.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/pseq.C	2010-10-09 17:34:23.000000000 -0400
@@ -199,7 +199,7 @@ pseq_t::pseq_t( int32 id )
   
  /* WATTCH power */
   m_power_stats = NULL;
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_power_stats = new power_t(this, id);
 
     //calculate static power:
@@ -1288,15 +1288,16 @@ void pseq_t::advanceCycle( void )
   }
 #endif
 
-  // I. Fetch instructions
-  fetchInstruction();
-
-  // II. Decode instructions in the pipe
-  decodeInstruction();
+  if (!(gab_flag & GAB_FLUSH)) {
+    // I. Fetch instructions
+    fetchInstruction();
 
-  // III. Schedule decoded instructions
-  scheduleInstruction();
+    // II. Decode instructions in the pipe
+    decodeInstruction();
 
+    // III. Schedule decoded instructions
+    scheduleInstruction();
+  }
   // (Executing scheduled instructions on functional units takes place
   //  implicitly after their dependencies become resolved) 
 
@@ -1537,8 +1538,15 @@ void pseq_t::fetchInstrSimple( )
                      // Modified to take in the logical proc's waiter object:
                hit = l1_inst_cache->Read( fetchPhysicalPC, m_proc_waiter[proc], false );
 
+               if (!hit && (gab_flag & GAB_NO_CACHE)) {
+                 //remove waiter from wait list
+                 ASSERT(m_proc_waiter[proc]->Waiting() == true);
+                 m_proc_waiter[proc]->RemoveWaitQueue();
+                 hit = true;
+               }
+
                 /* WATTCH power */
-               if(WATTCH_POWER){
+               if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
                  getPowerStats()->incrementICacheAccess();
                }
 
@@ -1598,7 +1606,7 @@ void pseq_t::fetchInstrSimple( )
       }
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         getPowerStats()->incrementWindowAccess();
       }
 
@@ -2466,7 +2474,7 @@ void pseq_t::retireInstruction( )
           while ( d != NULL ) {
 
             /* WATTCH power */
-            if(WATTCH_POWER){
+            if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
               getPowerStats()->incrementWindowAccess();
             }
             squash_pipeline  = false;
@@ -3396,7 +3404,7 @@ pseq_t::partialSquash(uint32 last_good, 
   #endif
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       getPowerStats()->incrementWindowAccess();
     }
 
@@ -3443,7 +3451,7 @@ pseq_t::fullSquash( enum i_opcode offend
 #endif
 
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       getPowerStats()->incrementWindowAccess();
     }   
 }
@@ -7337,6 +7345,42 @@ void pseq_t::printStats( void )
     il1_mshr->printStats( this );
   }
 
+  // GAB: custom statistics
+  out_info("\n***GAB Custom stats***\n");
+  out_info("\tds1_accesses[ %lld ]\n", gab_hw_ds1_accesses);
+  out_info("\tds2_accesses[ %lld ]\n", gab_hw_ds2_accesses);
+  
+  out_info("\tds1_first[ %lld ]\n", gab_hw_ds1_first);
+  out_info("\tds1_enqueue[ %lld ]\n", gab_hw_ds1_enqueue);
+  out_info("\tds1_enqueue_first[ %lld ]\n", gab_hw_ds1_enqueue_first);
+  out_info("\tds1_extract[ %lld ]\n", gab_hw_ds1_extract);
+  out_info("\tds1_requeue[ %lld ]\n", gab_hw_ds1_requeue);
+
+  out_info("\tds2_enqueue[ %lld ]\n", gab_hw_ds2_enqueue);
+  out_info("\tds2_extract[ %lld ]\n", gab_hw_ds2_extract);
+
+  out_info("\tds1_cycles_saved[ %lld ]\n", gab_hw_ds1_cycles_saved);
+  out_info("\tds2_cycles_saved[ %lld ]\n", gab_hw_ds2_cycles_saved);
+
+  out_info("\tds1_cycles_max[ %lld, %lld, %lld ]\n", gab_hw_ds1_cycles_max[0],gab_hw_ds1_cycles_max[1],gab_hw_ds1_cycles_max[2]);
+  out_info("\tds2_cycles_max[ %lld, %lld, %lld ]\n", gab_hw_ds2_cycles_max[0],gab_hw_ds2_cycles_max[1],gab_hw_ds2_cycles_max[2]);
+ 
+  out_info("\tds1_first_max[ %lld, %lld, %lld ]\n", gab_hw_ds1_first_max[0],gab_hw_ds1_first_max[1],gab_hw_ds1_first_max[2]);
+  out_info("\tds1_enqueue_max[ %lld, %lld, %lld, %lld, %lld ]\n", gab_hw_ds1_enqueue_max[0],gab_hw_ds1_enqueue_max[1],gab_hw_ds1_enqueue_max[2],gab_hw_ds1_enqueue_max[3],gab_hw_ds1_enqueue_max[4]);
+  out_info("\tds1_enqueue_first_max[ %lld, %lld, %lld ]\n", gab_hw_ds1_enqueue_first_max[0],gab_hw_ds1_enqueue_first_max[1],gab_hw_ds1_enqueue_first_max[2]);
+  out_info("\tds1_extract_max[ %lld, %lld, %lld, %lld, %lld ]\n", gab_hw_ds1_extract_max[0],gab_hw_ds1_extract_max[1],gab_hw_ds1_extract_max[2],gab_hw_ds1_extract_max[3],gab_hw_ds1_extract_max[4]);
+  out_info("\tds1_requeue_max[ %lld, %lld, %lld ]\n", gab_hw_ds1_requeue_max[0],gab_hw_ds1_requeue_max[1],gab_hw_ds1_requeue_max[2]);
+
+ 
+  out_info("\tds2_critical_max[ %lld, %lld, %lld ]\n", gab_hw_ds2_critical_max[0],gab_hw_ds2_critical_max[1],gab_hw_ds2_critical_max[2]);
+
+  out_info("\tsched_accesses[ %lld ]\n", gab_hw_sched_accesses);
+  out_info("\tsched_cycles_saved[ %lld ]\n", gab_hw_sched_cycles_saved);
+  out_info("\tsched_cycles_max[ %lld ]\n", gab_hw_sched_cycles_max);
+  out_info("\tsched_ds1_max[ %lld ]\n", gab_hw_sched_ds1_cycles_max);
+  out_info("\tsched_ds2_max[ %lld ]\n", gab_hw_sched_ds2_cycles_max);
+
+
   //print out SMT icount stats
   for(uint32 k=0; k <  CONFIG_LOGICAL_PER_PHY_PROC; ++k){  
     out_info("\n***ICount Stats [logical proc %d]: \n",k);
@@ -7580,6 +7624,37 @@ pseq_t::initializeStats(void) {
   DEBUG_OUT("pseq_t:initializeStats BEGIN\n");
   #endif
 
+  // GAB custom statistics
+  gab_hw_ds1_accesses = 0;
+  gab_hw_ds2_accesses = 0;
+
+  gab_hw_ds1_first = 0;
+  gab_hw_ds1_enqueue = 0;
+  gab_hw_ds1_enqueue_first = 0;
+  gab_hw_ds1_extract = 0;
+  gab_hw_ds1_requeue = 0;
+  gab_hw_ds1_first_max[0] = gab_hw_ds1_first_max[1] = gab_hw_ds1_first_max[2] = 0;
+  gab_hw_ds1_enqueue_max[0] = gab_hw_ds1_enqueue_max[1] = gab_hw_ds1_enqueue_max[2] = gab_hw_ds1_enqueue_max[3] = gab_hw_ds1_enqueue_max[4] = 0;
+  gab_hw_ds1_enqueue_first_max[0] = gab_hw_ds1_enqueue_first_max[1] = gab_hw_ds1_enqueue_first_max[2] = 0;
+  gab_hw_ds1_extract_max[0] = gab_hw_ds1_extract_max[1] = gab_hw_ds1_extract_max[2] = gab_hw_ds1_extract_max[3] = gab_hw_ds1_extract_max[4] = 0;
+  gab_hw_ds1_requeue_max[0] = gab_hw_ds1_requeue_max[1] = gab_hw_ds1_requeue_max[2] = 0;
+
+
+  gab_hw_ds2_enqueue = 0;
+  gab_hw_ds2_extract = 0;
+  gab_hw_ds1_cycles_saved = 0;
+  gab_hw_ds2_cycles_saved = 0;
+  gab_hw_ds1_cycles_max[0] = gab_hw_ds1_cycles_max[1] = gab_hw_ds1_cycles_max[2] = 0;
+  gab_hw_ds2_cycles_max[0] = gab_hw_ds2_cycles_max[1] = gab_hw_ds2_cycles_max[2] = 0;
+  gab_hw_ds2_critical_max[0] = gab_hw_ds2_critical_max[1] = gab_hw_ds2_critical_max[2] = 0;
+
+  gab_hw_sched_ds1_cycles_max = 0;
+  gab_hw_sched_ds2_cycles_max = 0;
+  gab_hw_sched_accesses = 0;
+  gab_hw_sched_cycles_saved = 0;
+  gab_hw_sched_cycles_max = 0;
+
+
   //WATTCH power: bank num stats
   for(int i=0; i < 8; ++i){
     m_l1i_banknum_accesses[i] = 0;
@@ -8168,7 +8243,7 @@ void pseq_t::collectBankNumStat(){
   m_l1i_2bank_histogram[unique_l1i_2banks]++;
   m_l1d_2bank_histogram[unique_l1d_2banks]++;
 
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     bank_num_t temp_bank_num;
     temp_bank_num.num_l1i_8banks = unique_l1i_8banks;
     temp_bank_num.num_l1d_8banks = unique_l1d_8banks;
@@ -8189,14 +8264,14 @@ void pseq_t::collectBankNumStat(){
 
 //**************************************************************************
 void pseq_t::clearAccessStats(){
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_power_stats->clear_access_stats();
   }
 }
 
 //**************************************************************************
 void pseq_t::updatePowerStats(){
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     //first collect our bank num stats and pass this info to WATTCH
     //  This is used to calculate clock-gating of banked L1 caches
     collectBankNumStat();
@@ -8206,14 +8281,14 @@ void pseq_t::updatePowerStats(){
 
 //**************************************************************************
 void pseq_t::incrementL2Access(){
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     m_power_stats->incrementL2CacheAccess();
   }
 }
 
 //*************************************************************************
 void pseq_t::incrementPrefetcherAccess(int num_prefetches, int isinstr){
-  if(WATTCH_POWER && PREFETCHER_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH) && PREFETCHER_POWER){
     m_power_stats->incrementPrefetcherAccess(num_prefetches, isinstr);
   }
 }
diff -X dontdiff -uprN gems-2.1.1/opal/system/pseq.h gems-2.1.1-hwds2/opal/system/pseq.h
--- gems-2.1.1/opal/system/pseq.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/pseq.h	2010-10-09 17:31:16.000000000 -0400
@@ -442,6 +442,10 @@ public:
   tick_t       getLocalCycle() {
     return (m_local_cycles);
   }
+  /** set the local cycle count */
+  void       setLocalCycle( tick_t t) {
+    (m_local_cycles = t);
+  }
   /** step the sequence number */
   uint64       stepSequenceNumber(unsigned int proc ) {
     uint64 number = m_local_sequence_number[proc];
@@ -1725,6 +1729,39 @@ public:
     m_atomic_miss_latency[thread].num_fastpath++;
   }
 
+  // GAB custom statistics
+  uint64 gab_hw_ds1_accesses;
+  uint64 gab_hw_ds2_accesses;
+  uint64 gab_hw_ds1_first;
+ uint64 gab_hw_ds1_enqueue;
+ uint64 gab_hw_ds1_enqueue_first;
+ uint64 gab_hw_ds1_extract;
+ uint64 gab_hw_ds1_requeue;
+   uint64 gab_hw_ds1_first_max[3];
+ uint64 gab_hw_ds1_enqueue_max[5];
+ uint64 gab_hw_ds1_enqueue_first_max[3];
+ uint64 gab_hw_ds1_extract_max[5];
+ uint64 gab_hw_ds1_requeue_max[3];
+
+ uint64 gab_hw_ds2_enqueue;
+ uint64 gab_hw_ds2_extract;
+
+  uint64 gab_hw_ds1_cycles_saved;
+  uint64 gab_hw_ds2_cycles_saved;
+
+  uint64 gab_hw_ds1_cycles_max[3];
+  uint64 gab_hw_ds2_cycles_max[3];
+
+  uint64 gab_hw_ds2_critical_max[3];
+
+  uint64 gab_hw_sched_ds1_cycles_max;
+  uint64 gab_hw_sched_ds2_cycles_max;
+  uint64 gab_hw_sched_accesses;
+  uint64 gab_hw_sched_cycles_saved;
+  uint64 gab_hw_sched_cycles_max;
+
+
+
   // WATTCH power
   //    Used to simulated power of banked L1 caches
   void L1IBankNumStat(int banknum);
diff -X dontdiff -uprN gems-2.1.1/opal/system/rubycache.C gems-2.1.1-hwds2/opal/system/rubycache.C
--- gems-2.1.1/opal/system/rubycache.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/rubycache.C	2010-09-28 22:36:47.000000000 -0400
@@ -1053,7 +1053,7 @@ ruby_status_t rubycache_t::access( la_t 
       system_t::inst->m_seq[seq_num]->L1IBankNumStat(banknum);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         system_t::inst->m_seq[seq_num]->getPowerStats()->incrementICacheAccess();
       }
     }
@@ -1067,7 +1067,7 @@ ruby_status_t rubycache_t::access( la_t 
       system_t::inst->m_seq[seq_num]->L1DBankNumStat(banknum);
 
       /* WATTCH power */
-      if(WATTCH_POWER){
+      if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
         system_t::inst->m_seq[seq_num]->getPowerStats()->incrementDCacheAccess();
       }
     }
@@ -1185,13 +1185,13 @@ ruby_status_t rubycache_t::prefetch( la_
 //charge power to access the cache, depending on whether it is an Ifetch, LD, or ST
   if(requestType == OPAL_IFETCH){
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       system_t::inst->m_seq[m_id]->getPowerStats()->incrementICacheAccess();
     }
   }
   else{
     /* WATTCH power */
-    if(WATTCH_POWER){
+    if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
       system_t::inst->m_seq[m_id]->getPowerStats()->incrementDCacheAccess();
     }
   }
diff -X dontdiff -uprN gems-2.1.1/opal/system/scheduler.C gems-2.1.1-hwds2/opal/system/scheduler.C
--- gems-2.1.1/opal/system/scheduler.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/scheduler.C	2010-09-28 22:36:47.000000000 -0400
@@ -126,7 +126,7 @@ scheduler_t::Execute( tick_t localcycle 
       int32     fu_mapped = CONFIG_ALU_MAPPING[fu_type];
       if (alu_used[fu_mapped] < CONFIG_NUM_ALUS[fu_mapped]) {
         /* WATTCH power */
-        if(WATTCH_POWER){
+        if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
           //don't increment FU_NONE type
           if(fu_type != FU_NONE){
             m_pseq->getPowerStats()->incrementAluAccess();
diff -X dontdiff -uprN gems-2.1.1/opal/system/system.C gems-2.1.1-hwds2/opal/system/system.C
--- gems-2.1.1/opal/system/system.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/system.C	2010-10-09 17:59:04.000000000 -0400
@@ -115,6 +115,9 @@ extern mf_opal_api_t hfa_ruby_interface;
 /** The highest number the SIM_current_proc_no() can return */
 static int32 s_max_processor_id = 0;
 
+/** global pause flag */
+int gab_flag = 0;
+
 /*------------------------------------------------------------------------*/
 /* Forward declarations                                                   */
 /*------------------------------------------------------------------------*/
@@ -183,6 +186,9 @@ static void system_exception_handler( vo
 static void system_exception_tracer( void *obj, conf_object_t *proc,
                                      uint64 exception );
 
+#include <signal.h>
+static void system_signalint(int sig);
+
 // C++ Template: explicit instantiation
 template class map<breakpoint_id_t, breakpoint_action_t *>;
 
@@ -218,6 +224,9 @@ system_t::system_t( const char *configur
   m_sim_status = SIMSTATUS_BREAK;
   sprintf( m_sim_message_buffer, "situation nominal" );
 
+  // register sigint handler
+  signal( SIGINT, system_signalint );
+
   // establish opal ruby api (see ruby/interfaces/mf_api.h & ruby/interfaces/OpalInterface.C)
   m_opal_api = &hfa_ruby_interface;
   m_opal_api->hitCallback    = &system_t::rubyCompletedRequest;
@@ -350,26 +359,272 @@ system_t::~system_t( void )
 static void
 system_breakpoint( void *data, conf_object_t *cpu, integer_t parameter )
 {
-  if ( parameter != 4UL << 16 ) {
-    // ignore all transaction completion calls
-    /* sprintf( system_t::inst->m_sim_message_buffer,
-             "other breakpoint (ignoring) 0x%llx", parameter );
-    */
-    //cout << "system_breakpoint called" << endl;
-    // MAGIC breakpoints get intercepted here.  Opal currently does not do anything special here
+  static tick_t cycles_store = 0;
+  static bool entered = false;
+  static bool sched_pause = false;
+  static int sched_entered = 0;
+  tick_t cycles_diff = 0;
+  static tick_t cycles_base1 = 0;
+  static tick_t cycles_base2 = 0;
+  static tick_t cycles_max = 0;
+  static tick_t cycles_this_access = 0;
+
+
+  /* Decode MAGIC() instructions */
+  switch ( parameter ) {
+
+    /* 0x1: Deadlines missed */
+    case (1):
+      ERROR_OUT("deadlines missed\n");
+      sprintf( system_t::inst->m_sim_message_buffer,
+          "deadlines missed" );
+      break;
 
-    return;
-  }
+     /* 0x10: access hw scheduler;
+     * 0x100, 0x200: access HW DS;  
+     * 0x300: access DS2 without updating count */
+    case (1UL << 4):  /* HW SCHED START */
+      sched_entered++;
+      if (sched_pause == false && sched_entered > 1)
+        break; /* don't do anything in nested scheduler calls */
+    case (2UL << 4):  /* HW SCHED UNPAUSE */
+      if (parameter == (2UL << 4)) {
+        if (sched_entered == 0)
+          break; /* spurious unpause */
+      }
+        sched_pause = false;
+      /* otherwise fall-thru */
+
+    /* 0x100, 0x200: access HW DS; 0x300: access DS2 without updating count */
+    case (1UL << 8):  /* HW DS1 START */
+    case ((1UL << 8) | 1): case ((1UL << 8) | 2): case ((1UL << 8) | 3): 
+    case ((1UL << 8) | 4): case ((1UL << 8) | 5): 
+    case(2UL << 8): /* HW DS2 START */
+    case ((2UL <<8)|1): case ((2UL << 8) | 2):
+    case (4UL << 8): /* HW DS2 UNPAUSE */
+      if ( sched_entered == 0 && entered ) {
+        ERROR_OUT("MAGIC[ 0x%x ] called during previous access\n", parameter);
+//        system_t::inst->m_seq[0]->setLocalCycle(cycles_store);
+      }
+      /* Turn off caching, power, and timing */
+      gab_flag |= (/*GAB_NO_CACHE |*/ GAB_NO_WATTCH | GAB_NO_TIMING);
+
+      /* implicit 'pause' scheduler on nested hwds access */
+      if (parameter & 0x100 && sched_entered > 0) {
+        cycles_diff = system_t::inst->m_seq[0]->getLocalCycle() - cycles_store;
+        cycles_this_access += cycles_diff;
+      }
  
-  //currently IGNORE the system_breakpoint (parameter = 0x4000)...
-  #if 0
-  ERROR_OUT("system_t::system_breakpoint REACHED param[ 0x%x ]\n", parameter);
+      /* save the local cycle count */
+      cycles_store = system_t::inst->m_seq[0]->getLocalCycle();
+
+      /* update access counters on first access */
+      if (parameter ==  1UL << 4 || parameter == 2UL << 4) {
+        system_t::inst->m_seq[0]->gab_hw_sched_accesses++;
+        cycles_base1 = system_t::inst->m_seq[0]->gab_hw_ds1_cycles_saved;
+        cycles_base2 = system_t::inst->m_seq[0]->gab_hw_ds2_cycles_saved;
+        cycles_this_access = 0;
+      } else if (parameter & 0x100) {
+        system_t::inst->m_seq[0]->gab_hw_ds1_accesses++;
+        if (sched_entered == 0)
+          cycles_this_access = 0;
+        switch (parameter & 0xf) {
+          case 1:
+            system_t::inst->m_seq[0]->gab_hw_ds1_first++;
+            break;
+          case 2:
+            system_t::inst->m_seq[0]->gab_hw_ds1_enqueue++;
+            break;
+          case 3:
+            system_t::inst->m_seq[0]->gab_hw_ds1_enqueue_first++;
+            break;
+          case 4:
+            system_t::inst->m_seq[0]->gab_hw_ds1_extract++;
+            break;
+          case 5:
+            system_t::inst->m_seq[0]->gab_hw_ds1_requeue++;
+            break;
+        }
+      } else if (parameter & 0x200) {
+        if (sched_entered == 0)
+          cycles_this_access = 0;
+        system_t::inst->m_seq[0]->gab_hw_ds2_accesses++;
+        switch (parameter & 0xf) {
+          case 1:
+            system_t::inst->m_seq[0]->gab_hw_ds2_enqueue++;
+            break;
+          case 2:
+            system_t::inst->m_seq[0]->gab_hw_ds2_extract++;
+            break;
+        }
+      }
+      
+      /* set flag for checking reentrance */
+      entered = true;
+      break;
+
+    case (0x11):  /* HW SCHED END */
+      if (sched_entered <= 0) break;
+      sched_entered--;
+      /* only update counts on outer scheduler access */
+      if (sched_entered > 0 || sched_pause == true) break;
+    case (0x21):  /* HW SCHED PAUSE */
+      if (parameter == 9UL << 4) {
+        if (sched_entered == 0 || sched_pause == true)
+          break;  /* spurious */
+        sched_pause = true;
+      }
+    /* 0x800, 0x900: Complete access of HW DS. 0xA00 indicates isr flash */
+    case (0x110UL):  /* HW DS1 END   */
+    case (0x111UL): case (0x112UL): case (0x113UL): 
+    case (0x114UL): case (0x115UL): 
+    case(0x210):   /* HW DS2 END   */
+    case (0x410):  /* HW DS2 PAUSE */
+      if ( !entered ) {
+        ERROR_OUT("MAGIC[ 0x%x ] called without previous access\n", parameter);
+        break;
+      }
+      if ( sched_entered == 0 )
+        entered = false;
+
+      /* compute number of cycles 'saved' by this ds call */
+      cycles_diff = system_t::inst->m_seq[0]->getLocalCycle() - cycles_store;
+      cycles_this_access += cycles_diff;
+      if (parameter == (1UL << 4 | 1) || parameter == (2UL << 4 |1)) {
+        system_t::inst->m_seq[0]->gab_hw_sched_cycles_saved += 
+          cycles_this_access;
+        if(cycles_this_access > 
+            system_t::inst->m_seq[0]->gab_hw_sched_cycles_max) {
+           system_t::inst->m_seq[0]->gab_hw_sched_cycles_max = 
+             cycles_this_access;
+           system_t::inst->m_seq[0]->gab_hw_sched_ds1_cycles_max = 
+             system_t::inst->m_seq[0]->gab_hw_ds1_cycles_saved - cycles_base1;
+           system_t::inst->m_seq[0]->gab_hw_sched_ds2_cycles_max = 
+             system_t::inst->m_seq[0]->gab_hw_ds2_cycles_saved - cycles_base2;
+        }
+        /* reset counter */
+        cycles_base1 = system_t::inst->m_seq[0]->gab_hw_ds1_cycles_saved;
+        cycles_base2 = system_t::inst->m_seq[0]->gab_hw_ds2_cycles_saved;
+        cycles_this_access = 0;
+      }
+      /* use cycles_diff because hw ds access is never nested */
+      else if ((parameter&~(0xff)) == (1UL << 8)) {
+        system_t::inst->m_seq[0]->gab_hw_ds1_cycles_saved += cycles_diff;
+        gab_update_max_triplet(cycles_diff, 
+          system_t::inst->m_seq[0]->gab_hw_ds1_cycles_max);
+        switch (parameter & 0xf) {
+          case 1:
+            gab_update_max_triplet(cycles_diff, 
+                system_t::inst->m_seq[0]->gab_hw_ds1_first_max);
+            break;
+          case 2:
+            gab_update_max_quintet(cycles_diff, 
+                system_t::inst->m_seq[0]->gab_hw_ds1_enqueue_max);
+            break;
+          case 3:
+            gab_update_max_triplet(cycles_diff, 
+                system_t::inst->m_seq[0]->gab_hw_ds1_enqueue_first_max);
+            break;
+          case 4:
+            gab_update_max_quintet(cycles_diff, 
+                system_t::inst->m_seq[0]->gab_hw_ds1_extract_max);
+            break;
+          case 5:
+            gab_update_max_triplet(cycles_diff, 
+                system_t::inst->m_seq[0]->gab_hw_ds1_requeue_max);
+            break;
+        }
+        /* implicit 'unpause' */
+      } else if (parameter == (0x210UL)) {
+        system_t::inst->m_seq[0]->gab_hw_ds2_cycles_saved += cycles_diff;
+        gab_update_max_triplet(cycles_diff, 
+          system_t::inst->m_seq[0]->gab_hw_ds2_cycles_max);
+      } else if (parameter == (0x410UL)) {
+        gab_update_max_triplet(cycles_diff, 
+          system_t::inst->m_seq[0]->gab_hw_ds2_critical_max);
+      }
+
+      cycles_store = system_t::inst->m_seq[0]->getLocalCycle();
+ 
+      /* Turn on caching, power, and timing */
+      gab_flag &= ~(GAB_NO_CACHE | GAB_NO_WATTCH | GAB_NO_TIMING | GAB_FLUSH);
+      break;
+#if 0
+    /* 0x1000: Turn off caching */
+    case (1UL << 12):
+      gab_flag |= GAB_NO_CACHE;
+      break;
+
+    /* 0x2000: turn on caching */
+    case (2UL << 12):
+      gab_flag &= (~GAB_NO_CACHE);
+      break;
+
+    /* 0x4000: Turn off power (wattch) */
+    case (4UL << 12):
+      gab_flag |= GAB_NO_WATTCH;
+      break;
+
+    /* 0x8000: Turn on power (wattch) */
+    case (8UL << 12):
+      gab_flag &= (~GAB_NO_WATTCH);
+      break;
+
+    /* 0x10000: Pause Simulation timing  */
+    case (1UL << 16):
+      /* Set flag, continue fetching instructions */
+      gab_flag |= GAB_NO_TIMING;
+
+      /* save the local cycle count */
+      cycles_store = system_t::inst->m_seq[0]->getLocalCycle();
+      break;
+
+    /* 0x20000: "Resume" normal timing */
+    case (2UL << 16):
+      /* finish executing/retiring instructions in the pipeline,
+       * set flag to prevent further instructions from being fetched */
+      gab_flag |= GAB_FLUSH;
+      for (int j = 0; j < system_t::inst->m_numSMTProcs; j++) {
+        for (uint k = 0; k < CONFIG_LOGICAL_PER_PHY_PROC; ++k ) {
+          iwindow_t *iwin = system_t::inst->m_seq[j]->getIwindow(k); 
+          int index = iwin->getLastRetired();
+          while ( iwin->peekWindow(index) ) {
+            system_t::inst->m_seq[j]->advanceCycle();
+          }
+        }
+      }
+
+      /* fix the local cycle count. ignore global cycles. */
+      system_t::inst->m_seq[0]->setLocalCycle(cycles_store);
+
+      /* resume normal timing. */
+      gab_flag &= (~(GAB_FLUSH | GAB_NO_TIMING));
+      break;
+#endif
+    /* 0x40000: Magic breakpoint */
+    case (4UL << 16): 
+      ERROR_OUT("system_t::system_breakpoint REACHED param[ 0x%x ]\n", 
+          parameter);
+      sprintf( system_t::inst->m_sim_message_buffer,
+          "magic breakpoint reached" );
+      HALT_SIMULATION;
+      break;
+
+    default: 
+      printf("unrecognized magic: %d", parameter );
+      break;
+  }
 
-  sprintf( system_t::inst->m_sim_message_buffer,
-           "magic breakpoint reached" );
-  HALT_SIMULATION;
   return;
-  #endif
+}
+
+//***************************************************************************
+static void
+system_signalint( int sig )
+{
+   signal( sig, SIG_IGN ); //ignore the signal
+   HALT_SIMULATION;
+   signal( SIGINT, system_signalint ); // re-register signal
 }
 
 //***************************************************************************
@@ -1798,7 +2053,7 @@ integer_t system_t::rubyInstructionQuery
 //**************************************************************************
 void system_t::rubyIncrementL2Access( int cpuNumber){
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     ASSERT( (cpuNumber >= 0) && (cpuNumber < system_t::inst->m_numProcs) );
     
     int32 seq_index = cpuNumber;
@@ -1811,7 +2066,7 @@ void system_t::rubyIncrementL2Access( in
 //**************************************************************************
 void system_t::rubyIncrementPrefetcherAccess(int cpuNumber, int num_prefetches, int isinstr){
   /* WATTCH power */
-  if(WATTCH_POWER){
+  if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
     ASSERT( (cpuNumber >= 0) && (cpuNumber < system_t::inst->m_numProcs) );
     
     int32 seq_index = cpuNumber;
diff -X dontdiff -uprN gems-2.1.1/opal/system/system.h gems-2.1.1-hwds2/opal/system/system.h
--- gems-2.1.1/opal/system/system.h	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/system.h	2010-10-09 16:28:02.000000000 -0400
@@ -429,4 +429,59 @@ extern "C" cycles_t system_memory_operat
                                              map_list_t *map,
                                              memory_transaction_t *mem_op);
 
+/**
+ * Global flag hack
+ */
+extern int gab_flag;
+#define GAB_NORMAL      (0x00)  /* No flag bits set */
+#define GAB_NO_TIMING   (0x01)  /* Timing information is not kept */
+#define GAB_NO_CACHE    (0x02)  /* Don't use cache */
+#define GAB_FLUSH       (0x04)  /* Insts are not fetched */
+#define GAB_NO_WATTCH   (0x08)  /* Don't update wattch stats */
+
+#define gab_update_max_quintet( val, arr ) \
+  do { \
+    if (val > arr[4]) { \
+      if (val > arr[3]) { \
+        arr[4] = arr[3]; \
+        if (val > arr[2]) { \
+          arr[3] = arr[2]; \
+          if (val > arr[1]) { \
+            arr[2] = arr[1]; \
+            if (val > arr[0]) { \
+              arr[1] = arr[0]; \
+              arr[0] = val; \
+            } else { \
+            arr[1] = val; \
+            } \
+          } else { \
+            arr[2] = val; \
+          } \
+        } else { \
+          arr[3] = val; \
+        } \
+      } else { \
+        arr[4] = val; \
+      } \
+    } \
+  } while (0)
+
+#define gab_update_max_triplet( val, arr ) \
+  do { \
+    if (val > arr[2]) { \
+      if (val > arr[1]) { \
+        if (val > arr[0]) { \
+          arr[2] = arr[1]; \
+          arr[1] = arr[0]; \
+          arr[0] = val; \
+        } else { \
+          arr[2] = arr[1]; \
+          arr[1] = val; \
+        } \
+      } else { \
+        arr[2] = val; \
+      } \
+    } \
+  } while (0)
+
 #endif /* __SYSTEM_H */
diff -X dontdiff -uprN gems-2.1.1/opal/system/writebuffer.C gems-2.1.1-hwds2/opal/system/writebuffer.C
--- gems-2.1.1/opal/system/writebuffer.C	2010-09-01 14:06:13.000000000 -0400
+++ gems-2.1.1-hwds2/opal/system/writebuffer.C	2010-09-28 22:36:47.000000000 -0400
@@ -212,7 +212,7 @@ void writebuffer_t::flushWriteBuffer(){
                  next_ruby_request->m_is_outstanding = true;
 
                  /* WATTCH power */
-                 if(WATTCH_POWER){
+                 if(WATTCH_POWER && !(gab_flag & GAB_NO_WATTCH)){
                    system_t::inst->m_seq[m_id]->getPowerStats()->incrementDCacheAccess();
                  }
 
diff -X dontdiff -uprN gems-2.1.1/ruby/common/Debug.C gems-2.1.1-hwds2/ruby/common/Debug.C
--- gems-2.1.1/ruby/common/Debug.C	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwds2/ruby/common/Debug.C	2010-09-28 22:36:47.000000000 -0400
@@ -66,6 +66,7 @@
 #include "Debug.h"
 #include "EventQueue.h"
 
+#include "string.h"
 class Debug;
 extern Debug* g_debug_ptr;
 std::ostream * debug_cout_ptr;
diff -X dontdiff -uprN gems-2.1.1/ruby/log_tm/LazyTransactionVersionManager.C gems-2.1.1-hwds2/ruby/log_tm/LazyTransactionVersionManager.C
--- gems-2.1.1/ruby/log_tm/LazyTransactionVersionManager.C	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwds2/ruby/log_tm/LazyTransactionVersionManager.C	2010-09-28 22:36:47.000000000 -0400
@@ -280,8 +280,9 @@ void LazyTransactionVersionManager::issu
       should_escape = true;
     }
 
-    CacheMsg storeMsg(Address(request_address),
-                      Address(request_address),
+    Address ad(request_address);
+    CacheMsg storeMsg(ad,
+                      ad,
                       CacheRequestType_ST_XACT,    
                       SIMICS_get_program_counter(getLogicalProcID(thread)),
                       AccessModeType_UserMode,
diff -X dontdiff -uprN gems-2.1.1/ruby/system/CacheMemory.h gems-2.1.1-hwds2/ruby/system/CacheMemory.h
--- gems-2.1.1/ruby/system/CacheMemory.h	2010-09-01 14:06:10.000000000 -0400
+++ gems-2.1.1-hwds2/ruby/system/CacheMemory.h	2010-09-28 22:36:47.000000000 -0400
@@ -78,6 +78,7 @@
 #include "PseudoLRUPolicy.h"
 #include "LRUPolicy.h"
 #include <vector>
+#include "string.h"
 
 template<class ENTRY>
 class CacheMemory {
diff -X dontdiff -uprN gems-2.1.1/scripts/makesymlinks.sh gems-2.1.1-hwds2/scripts/makesymlinks.sh
--- gems-2.1.1/scripts/makesymlinks.sh	2010-09-01 14:06:12.000000000 -0400
+++ gems-2.1.1-hwds2/scripts/makesymlinks.sh	2010-09-28 22:37:08.000000000 -0400
@@ -22,7 +22,7 @@ cd ../..
 # in your Simics 3 install
 echo "Making symlink for import directory..."
 #ln -s /simics-3.0.11/import import
-ln -s /p/multifacet/projects/simics/simics-3.0.11/import import
+ln -s ${SIMICS_INSTALL}/import import
 
 echo "Making symlinks for modules..."
 cd modules
