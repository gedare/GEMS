#
# This file has been modified by Kevin Moore and Dan Nussbaum of the
# Scalable Systems Research Group at Sun Microsystems Laboratories
# (http://research.sun.com/scalable/) to support the Adaptive
# Transactional Memory Test Platform (ATMTP).  For information about
# ATMTP, see the GEMS website: http://www.cs.wisc.edu/gems/.
#
# Please send email to atmtp-interest@sun.com with feedback,
# questions, or to request future announcements about ATMTP.
#
# ----------------------------------------------------------------------
#
# File modification date: 2008-02-23
#
# ----------------------------------------------------------------------
#  
# ATMTP is distributed as part of the GEMS software toolset and is
# available for use and modification under the terms of version 2 of
# the GNU General Public License.  The GNU General Public License is
# contained in the file $GEMS/LICENSE.
#  
# Multifacet GEMS is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public
# License as published by the Free Software Foundation.
#
# Multifacet GEMS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Multifacet GEMS; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
# USA
#
# ----------------------------------------------------------------------

# $Id$
#
# Shared makefile defines for ruby and slicc

.SECONDARY:
.PRECIOUS: %/created

include $(GEMS_ROOT)/common/Makefile.simics_version

HOST_TYPE := $(shell $(GEMS_ROOT)/scripts/calc_host.sh)
SIMICS_ROOT := $(GEMS_ROOT)/simics
SLICC_ROOT := $(GEMS_ROOT)/slicc
PROTOCOL_ROOT := $(GEMS_ROOT)/protocols
OPAL_ROOT := $(GEMS_ROOT)/opal

ifeq ($(SIMICS_VERSION),2.2.X)
  SIMICS_ROOT := $(GEMS_ROOT)/simics
  SIMICS_EXEC_ROOT := /dev/null22
  SIMICS_INCLUDE_ROOT := /dev/null22
else
ifeq ($(SIMICS_VERSION),3.0)
  SIMICS_ROOT := /dev/null30
  SIMICS_EXEC_ROOT := $(GEMS_ROOT)/simics
  # NOTE: This variable must be updated to point to the src/include directory
  # of your Simics 3.0 installation
  SIMICS_INCLUDE_ROOT := $(GEMS_ROOT)/simics/src/include
else
  SIMICS_ROOT := /dev/blah
  SIMICS_EXEC_ROOT := /dev/foo
  SIMICS_INCLUDE_ROOT := /dev/bar
endif
endif

SLICC := $(GEMS_ROOT)/slicc/$(HOST_TYPE)/bin/slicc.exec

OBJ_DIR := $(HOST_TYPE)/obj
BIN_DIR := $(HOST_TYPE)/bin

OBJ = $(addprefix $(OBJ_DIR)/,$(SRC_C:.c=.o) $(SRC_CPP:.C=.o))
DEP = $(addprefix $(OBJ_DIR)/,$(SRC_C:.c=.d) $(SRC_CPP:.C=.d))

VPATH_INCLUDES := $(patsubst %,-I%,$(subst :, ,$(VPATH)))
WARN_FLAGS := -Wall -W -Wwrite-strings -Woverloaded-virtual -Wno-unused #-Wshadow -Wold-style-cast -Wundef -Wconversion 

SHELL := /bin/sh
# define the following to see more error about the parser (when parsing parser.y)
YACC := bison
YFLAGS := --verbose --defines
LEX := flex
LFLAGS := 


# make sure simics is configured to use the same version of gcc as below.
# for last drop of performance, you could try to reduce code size with template
# repository. This takes much longer to build.
#LDFLAGS += -frepo
# file to check for: ../simics/config/host-flags.x86-linux 
#                    ../simics/x86-linux/config/host-config
#                    ../simics/x86-linux/config/host-config.h

CC_VERSION=3.4.4

ifeq ($(HOST_TYPE),amd64-linux)
  CC =  /s/gcc-3.4.4/bin/g++
  #CC =  /usr/bin/g++
  OPT_FLAGS = -m64 -march=opteron -fPIC
  LDFLAGS += -ggdb -g3 -Wl,-R/s/gcc-3.4.4/lib64 
  MODULE_LDFLAGS += -Wl,-R/s/gcc-3.4.4/lib64

else
ifeq ($(HOST_TYPE),v9-sol8-64)
  # CC = purify -best-effort -leaks-at-exit=yes -chain-length="15" /s/gcc-3.4.1/bin/g++ -static
  # CC = /s/gcc-3.4.3/bin/g++ -I/s/getopt-0/include
  CC = g++ -I/s/getopt-0/include
  OPT_FLAGS = -m64 -mcpu=v9 -DUSE_DIRENT
  LDFLAGS += -m64 -L/s/getopt-0/lib -lgetopt
else
ifeq ($(HOST_TYPE),x86-linux)
  CC =  /s/gcc-3.4.1/bin/g++
  #CC =  /usr/bin/g++
  OPT_FLAGS = -march=i686
  LDFLAGS += -ggdb -g3
else
  CC = /dev/null
endif
endif
endif

# optionally, you could hard code library paths here, though not recommended
#LDFLAGS += -Wl,-Ryour/path/here

# debug flags
# g1 - g3 product minimal to maximal debug info
OPT_FLAGS += -g -ggdb -g3

# other flags
#OPT_FLAGS += -O0 -w
#OPT_FLAGS += -O0 -Wall -pedantic-errors -Wno-long-long
#OPT_FLAGS += -O0 -DNO_VECTOR_BOUNDS_CHECKS
#OPT_FLAGS += -O1
#OPT_FLAGS += -O2 -finline-functions 

OPT_FLAGS += -O2 -finline-functions -DNO_VECTOR_BOUNDS_CHECKS -DMULTIFACET_NO_OPT_WARN

CP := /bin/cp -f 
MV := /bin/mv -f 
RM := /bin/rm -f 
LN := /bin/ln -f 

ifeq ($(TARGET_MACHINE_TYPE),SPARC)
  SPECIAL_FLAGS += -DSPARC
endif

ifeq ($(SIMICS_VERSION),2.2.X)
  SPECIAL_FLAGS += -DSIMICS22X
else
ifeq ($(SIMICS_VERSION),3.0)
  SPECIAL_FLAGS += -DADD_ARCH_TO_API -DSIMICS30 
else
  SPECIAL_FLAGS += -stopcompile # Not really a flag, but something should complain with an
                                # error in this case
endif
endif

LDFLAGS += -lz
CFLAGS = $(SPECIAL_FLAGS) $(WARN_FLAGS) $(OPT_FLAGS) $(BUILD_FLAGS) $(DEBUG_FLAGS) $(VPATH_INCLUDES) $(INCLUDES) 
DEPEND_FLAGS = -MM -MG

# Rules for generating the object files and dependence files
$(OBJ_DIR)/%.o: %.C $(OBJ_DIR)/created
	$(CC) -o $@ -c $< $(CFLAGS) 

$(OBJ_DIR)/%.o: %.c $(OBJ_DIR)/created
	$(CC) -o $@ -c $< $(CFLAGS)  

$(OBJ_DIR)/%.d: %.C $(OBJ_DIR)/created
	$(SHELL) -ec '$(CC) $(DEPEND_FLAGS) $(CFLAGS) $< | sed -e '\''s@^\(.*\)\.o:@$@:@'\'' | sed -e '\''s@^\(.*\)\.d:@\1.d \1.o:@'\'' > $@ #'

$(OBJ_DIR)/%.d: %.c $(OBJ_DIR)/created
	$(SHELL) -ec '$(CC) $(DEPEND_FLAGS) $(CFLAGS) $< | sed -e '\''s@^\(.*\)\.o:@$@:@'\'' | sed -e '\''s@^\(.*\)\.d:@\1.d \1.o:@'\'' > $@ #'

.l.c:
	$(error wrong rule)

.y.c:
	$(error wrong rule)

# Rule to make sure we create the directories as needed
%/created:
	mkdir -p $(dir $@)
	touch $@

.PHONY: all clean tags

