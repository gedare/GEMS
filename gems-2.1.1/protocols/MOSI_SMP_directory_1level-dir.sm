
/*
    Copyright (C) 1999-2005 by Mark D. Hill and David A. Wood for the
    Wisconsin Multifacet Project.  Contact: gems@cs.wisc.edu
    http://www.cs.wisc.edu/gems/

    --------------------------------------------------------------------

    This file is part of the SLICC (Specification Language for
    Implementing Cache Coherence), a component of the Multifacet GEMS
    (General Execution-driven Multiprocessor Simulator) software
    toolset originally developed at the University of Wisconsin-Madison.
                                                                                
    SLICC was originally developed by Milo Martin with substantial
    contributions from Daniel Sorin.

    Substantial further development of Multifacet GEMS at the
    University of Wisconsin was performed by Alaa Alameldeen, Brad
    Beckmann, Jayaram Bobba, Ross Dickson, Dan Gibson, Pacia Harper,
    Derek Hower, Milo Martin, Michael Marty, Carl Mauer, Michelle Moravan,
    Kevin Moore, Manoj Plakal, Daniel Sorin, Haris Volos, Min Xu, and Luke Yen.

    --------------------------------------------------------------------

    If your use of this software contributes to a published paper, we
    request that you (1) cite our summary paper that appears on our
    website (http://www.cs.wisc.edu/gems/) and (2) e-mail a citation
    for your published paper to gems@cs.wisc.edu.

    If you redistribute derivatives of this software, we request that
    you notify us and either (1) ask people to register with us at our
    website (http://www.cs.wisc.edu/gems/) or (2) collect registration
    information and periodically send it to us.

    --------------------------------------------------------------------

    Multifacet GEMS is free software; you can redistribute it and/or
    modify it under the terms of version 2 of the GNU General Public
    License as published by the Free Software Foundation.

    Multifacet GEMS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Multifacet GEMS; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307, USA

    The GNU General Public License is contained in the file LICENSE.

### END HEADER ###
*/
/*
 * $Id: MOSI_directory-dir.sm 1.14 04/09/07 13:52:52-05:00 mikem@maya.cs.wisc.edu $
 */

machine(Directory, "MOSI Directory Optimized") {


  MessageBuffer forwardedRequestFromDir, network="To", virtual_network="1", ordered="true";
  MessageBuffer responseFromDir, network="To", virtual_network="2", ordered="false";
  MessageBuffer requestToDir, network="From", virtual_network="0", ordered="false";

  // STATES
  enumeration(State, desc="Directory states", default="Directory_State_I") {
    // Base states
    I, desc="Idle";
    S, desc="Shared";
    O, desc="Owned";
    M, desc="Modified", format="!b";
  }

  // Events
  enumeration(Event, desc="Directory events") {
    GETS, desc="A GETS arrives";
    GETX_Owner, desc="A GETX arrives, requestor is owner";
    GETX_NotOwner, desc="A GETX arrives, requestor is not owner";
    PUTX_Owner, "PUTX (requestor is owner)", desc="A PUTX arrives, requestor is owner";
    PUTX_NotOwner, "PUTX (requestor not owner)",desc="A PUTX arrives, requestor is not owner";
  }

  // TYPES

  // DirectoryEntry
  structure(Entry, desc="...") {
    State DirectoryState,          desc="Directory state";
    NetDest Sharers,                   desc="Set of sharers";
    bool DirOwner, default="true", desc="Is dir owner?";
    MachineID ProcOwner,  desc="Processor owner";
    DataBlock DataBlk,             desc="data for the block";
  }

  external_type(DirectoryMemory) {
    Entry lookup(Address);
    bool isPresent(Address);
  }

  // ** OBJECTS **

  DirectoryMemory directory, constructor_hack="i";

  State getState(Address addr) {
    if (directory.isPresent(addr)) {
      return directory[addr].DirectoryState;
    }
    return State:I;
  }
  
  void setState(Address addr, State state) {
    if (directory.isPresent(addr)) {
      directory[addr].DirectoryState := state;
    }
  }
  
  // ** OUT_PORTS **
  out_port(forwardedRequestNetwork_out, RequestMsg, forwardedRequestFromDir);
  out_port(responseNetwork_out, ResponseMsg, responseFromDir);
  
  // ** IN_PORTS **
  
  in_port(requestNetwork_in, RequestMsg, requestToDir) {
    if (requestNetwork_in.isReady()) {
      peek(requestNetwork_in, RequestMsg) {
        if (in_msg.Type == CoherenceRequestType:GETS) {
          trigger(Event:GETS, in_msg.Address);
        } else if (in_msg.Type == CoherenceRequestType:GETX) {
          if(directory[in_msg.Address].DirOwner == false && in_msg.Requestor == directory[in_msg.Address].ProcOwner) {
            trigger(Event:GETX_Owner, in_msg.Address);
          } else {
            trigger(Event:GETX_NotOwner, in_msg.Address);
          }
        } else if (in_msg.Type == CoherenceRequestType:PUTX) {
          if (directory[in_msg.Address].DirOwner == false && in_msg.Requestor == directory[in_msg.Address].ProcOwner) {
            trigger(Event:PUTX_Owner, in_msg.Address);
          } else {
            trigger(Event:PUTX_NotOwner, in_msg.Address);
          }
        } else {
          error("Invalid message");
        }
      }
    }
  }
  
  
  // Actions
  
  // a_addRequestorToSharers
  
  action(a_addRequestorToSharers, "a", desc="Add requestor to list of sharers") {
    peek(requestNetwork_in, RequestMsg) {
      directory[address].Sharers.add(in_msg.Requestor);
      DEBUG_EXPR(directory[address].Sharers);
    }
  }

  // b_dataToRequestor

  action(b_dataToRequestor, "b", desc="Send data to requestor") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(responseNetwork_out, ResponseMsg, latency="MEMORY_LATENCY") {
        out_msg.Address := address;
        out_msg.Type := CoherenceResponseType:DATA;
        out_msg.Sender := machineID;
        out_msg.SenderMachine := MachineType:Directory;
        if(in_msg.Type == CoherenceRequestType:GETX) {
          out_msg.NumPendingAcks := directory[address].Sharers.count();
        } else {
          out_msg.NumPendingAcks := 0; // don't need to send pending ack count to GETS requestor
        }
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.DestMachine := MachineType:L1Cache;
        out_msg.DataBlk := directory[address].DataBlk;
        DEBUG_EXPR(out_msg.NumPendingAcks);
        DEBUG_EXPR(out_msg.Destination);
        out_msg.MessageSize := MessageSizeType:Data;
      }
    }
  }

  // d_forwardRequestToOwner

  action(d_forwardRequestToOwner, "d", desc="Forward request to owner") {
    peek(requestNetwork_in, RequestMsg) {
      enqueue(forwardedRequestNetwork_out, RequestMsg, latency="DIRECTORY_LATENCY") {
        out_msg.Address := address;
        out_msg.Type := in_msg.Type;
        out_msg.Requestor := in_msg.Requestor;
        out_msg.Destination.add(directory[address].ProcOwner);
        DEBUG_EXPR(out_msg.Destination);

        if(in_msg.Type == CoherenceRequestType:GETX) {
          out_msg.NumPendingAcks := directory[address].Sharers.count();
        } else {
          out_msg.NumPendingAcks := 0; // don't need to send pending ack count to GETS requestor
        }
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }
  
  action(f_setOwnerToRequestor, "f", desc="Set owner equal to requestor") {
    peek(requestNetwork_in, RequestMsg) {
      directory[address].ProcOwner := in_msg.Requestor;
      directory[address].DirOwner := false;
    }
    DEBUG_EXPR(directory[address].ProcOwner);
  }

  action(g_clearSharers, "g", desc="Clear list of sharers") {
    directory[address].Sharers.clear();
  }

  // currently done via multicast message

  action(h_invToSharers, "h", desc="Send INVs to all sharers") {
    peek(requestNetwork_in, RequestMsg) {
      if(directory[address].Sharers.count() != 0){
        enqueue(forwardedRequestNetwork_out, RequestMsg, latency="DIRECTORY_LATENCY") {
          out_msg.Address := address;
          out_msg.Type := CoherenceRequestType:INV;
          out_msg.Requestor := in_msg.Requestor;
          out_msg.Destination := directory[address].Sharers;
          out_msg.MessageSize := MessageSizeType:Control;
        }
      }
    }
    DEBUG_EXPR(directory[address].Sharers);
  }
  
  action(j_popIncomingRequestQueue, "j", desc="Pop incoming request queue") {
    requestNetwork_in.dequeue();
  }

  action(l_writeRequestDataToMemory, "l", desc="Write PUTX/DWN data to memory") {
    peek(requestNetwork_in, RequestMsg) {
      directory[in_msg.Address].DataBlk := in_msg.DataBlk;
      DEBUG_EXPR(in_msg.Address);
      DEBUG_EXPR(in_msg.DataBlk);
    }
  }

  action(n_writebackAckToRequestor, "n", desc="Send WB_ack to requestor") {
    peek(requestNetwork_in, RequestMsg) {
      // This needs to be DIRECTORY_LATENCY to keep the queue fifo
      enqueue(forwardedRequestNetwork_out, RequestMsg, latency="DIRECTORY_LATENCY") {
        out_msg.Address := address;
        out_msg.Type := CoherenceRequestType:WB_ACK;
        out_msg.Requestor := machineID;
        out_msg.Destination.add(in_msg.Requestor);
        out_msg.MessageSize := MessageSizeType:Control;
      }
    }
  }

  action(p_clearOwner, "p", desc="Clear owner") {
    directory[address].DirOwner := true;  // set owner equal to dir
  }

  action(r_addOwnerToSharers, "r", desc="Add owner to list of sharers") {
    directory[address].Sharers.add(directory[address].ProcOwner);
  }

  action(t_removeOwnerFromSharers, "t", desc="Remove owner from list of sharers") {
    directory[address].Sharers.remove(directory[address].ProcOwner);
  }

  action(u_removeRequestorFromSharers, "u", desc="Remove requestor from list of sharers") {
    peek(requestNetwork_in, RequestMsg) {
      directory[address].Sharers.remove(in_msg.Requestor);
    }
  }

  // TRANSITIONS

  transition({I, S, M, O}, PUTX_NotOwner) {
    n_writebackAckToRequestor;
    j_popIncomingRequestQueue;
  }

  // Transitions from Idle
  transition(I, GETS, S) {
    a_addRequestorToSharers;
    b_dataToRequestor;
    j_popIncomingRequestQueue;
  }

  transition(I, GETX_NotOwner, M) {
    f_setOwnerToRequestor;
    b_dataToRequestor;
    j_popIncomingRequestQueue;
  }

  // Transitions from Shared
  transition(S, GETS) {
    a_addRequestorToSharers;
    b_dataToRequestor;
    j_popIncomingRequestQueue;
  }

  transition(S, GETX_NotOwner, M) {
    u_removeRequestorFromSharers;
    b_dataToRequestor;
    f_setOwnerToRequestor;
    h_invToSharers;
    g_clearSharers;
    j_popIncomingRequestQueue;
  }

  // Transitions from Owned
  transition(O, GETS) {
    a_addRequestorToSharers;
    d_forwardRequestToOwner;
    j_popIncomingRequestQueue;
  }

  transition(O, {GETX_NotOwner, GETX_Owner}, M) {
    u_removeRequestorFromSharers;
    t_removeOwnerFromSharers;
    d_forwardRequestToOwner;
    f_setOwnerToRequestor;
    h_invToSharers;
    g_clearSharers;
    j_popIncomingRequestQueue;
  }

  transition(O, PUTX_Owner, S) {
    u_removeRequestorFromSharers;
    l_writeRequestDataToMemory;
    n_writebackAckToRequestor;
    p_clearOwner;
    j_popIncomingRequestQueue;
  }


  // Transitions from Modified
  transition(M, GETS, O) {
    a_addRequestorToSharers;
    r_addOwnerToSharers;
    d_forwardRequestToOwner;
    j_popIncomingRequestQueue;
  }

  transition(M, GETX_NotOwner) {
    d_forwardRequestToOwner;
    f_setOwnerToRequestor;
    j_popIncomingRequestQueue;
  }

  transition(M, PUTX_Owner, I) {
    l_writeRequestDataToMemory;
    n_writebackAckToRequestor;
    p_clearOwner;
    j_popIncomingRequestQueue;
  }
}
