
/*
    Copyright (C) 1999-2005 by Mark D. Hill and David A. Wood for the
    Wisconsin Multifacet Project.  Contact: gems@cs.wisc.edu
    http://www.cs.wisc.edu/gems/

    --------------------------------------------------------------------

    This file is part of the SLICC (Specification Language for
    Implementing Cache Coherence), a component of the Multifacet GEMS
    (General Execution-driven Multiprocessor Simulator) software
    toolset originally developed at the University of Wisconsin-Madison.
                                                                                
    SLICC was originally developed by Milo Martin with substantial
    contributions from Daniel Sorin.

    Substantial further development of Multifacet GEMS at the
    University of Wisconsin was performed by Alaa Alameldeen, Brad
    Beckmann, Jayaram Bobba, Ross Dickson, Dan Gibson, Pacia Harper,
    Derek Hower, Milo Martin, Michael Marty, Carl Mauer, Michelle Moravan,
    Kevin Moore, Manoj Plakal, Daniel Sorin, Haris Volos, Min Xu, and Luke Yen.

    --------------------------------------------------------------------

    If your use of this software contributes to a published paper, we
    request that you (1) cite our summary paper that appears on our
    website (http://www.cs.wisc.edu/gems/) and (2) e-mail a citation
    for your published paper to gems@cs.wisc.edu.

    If you redistribute derivatives of this software, we request that
    you notify us and either (1) ask people to register with us at our
    website (http://www.cs.wisc.edu/gems/) or (2) collect registration
    information and periodically send it to us.

    --------------------------------------------------------------------

    Multifacet GEMS is free software; you can redistribute it and/or
    modify it under the terms of version 2 of the GNU General Public
    License as published by the Free Software Foundation.

    Multifacet GEMS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with the Multifacet GEMS; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307, USA

    The GNU General Public License is contained in the file LICENSE.

### END HEADER ###
*/
/*
 * $Id$
 *
 */

// CoherenceRequestType
enumeration(CoherenceRequestType, desc="...") {
  GETX,      desc="Get eXclusive";
  UPGRADE,   desc="UPGRADE to exclusive";
  GETS,      desc="Get Shared";
  GET_INSTR, desc="Get Instruction";
  PUTX,      desc="Put eXclusive";
  PUTS,      desc="Put Shared";
  INV,       desc="INValidate";
  INV_S,     desc="INValidate the shared version";
  L1_DG,     desc="L1 cache DownGrade";
  WB_ACK,    desc="Write Back ACKnowledgment";
  EXE_ACK,   desc="EXclusivE ACKnowledgment";
}

// CoherenceResponseType
enumeration(CoherenceResponseType, desc="...") {
  ACK,       desc="ACKnowledgment";
  INV_ACK,   desc="INValidation ACKnowledgment";
  DG_ACK,    desc="DownGrade ACKnowledgment";
  NACK,      desc="Negative ACKnowledgment";
  DATA,      desc="Data";
  DATA_S,    desc="Data to L1 cache, then imediately go to shared state";
  DATA_I,    desc="Data to L1 cache, then imediately go to inv state";
  FINALACK,  desc="";
}

// RequestMsg
structure(RequestMsg, desc="...", interface="NetworkMessage") {
  Address Address,              desc="Physical address for this request";
  CoherenceRequestType Type,    desc="Type of request (GetS, GetX, PutX, etc)";
  AccessModeType AccessMode,    desc="user/supervisor access type";
  MachineID RequestorMachId,    desc="What component request";
  NetDest Destination,          desc="What components receive the request, includes MachineType and num";
  DataBlock DataBlk,            desc="Data for the cache line (if PUTX)";
  int NumPendingExtAcks,        desc="Number of acks to wait for"; // Needed for forwarded responses only
  MessageSizeType MessageSize,  desc="size category of the message";
  string L1CacheStateStr,       desc="describes L1 cache block state";  
  string L2CacheStateStr,       desc="describes L2 cache block state";  
  PrefetchBit Prefetch,         desc="Is this a prefetch request";
}

// ResponseMsg
structure(ResponseMsg, desc="...", interface="NetworkMessage") {
  Address Address,              desc="Physical address for this request";
  CoherenceResponseType Type,   desc="Type of response (Ack, Data, etc)";
  MachineID SenderMachId,     desc="What component sent the data";
  NetDest Destination,          desc="Node to whom the data is sent";
  DataBlock DataBlk,            desc="data for the cache line";
  int NumPendingExtAcks,        desc="Number of acks to wait for";
  MessageSizeType MessageSize,  desc="size category of the message";
}

GenericRequestType convertToGenericType(CoherenceRequestType type) {
  if(type == CoherenceRequestType:PUTX) {
    return GenericRequestType:PUTX;
  } else if(type == CoherenceRequestType:GETS) {
    return GenericRequestType:GETS;
  } else if(type == CoherenceRequestType:GET_INSTR) {
    return GenericRequestType:GET_INSTR;
  } else if(type == CoherenceRequestType:GETX) {
    return GenericRequestType:GETX;
  } else if(type == CoherenceRequestType:UPGRADE) {
    return GenericRequestType:UPGRADE;
  } else if(type == CoherenceRequestType:PUTS) {
    return GenericRequestType:PUTS;
  } else if(type == CoherenceRequestType:INV) {
    return GenericRequestType:INV;
  } else if(type == CoherenceRequestType:INV_S) {
    return GenericRequestType:INV_S;
  } else if(type == CoherenceRequestType:L1_DG) {
    return GenericRequestType:DOWNGRADE;
  } else if(type == CoherenceRequestType:WB_ACK) {
    return GenericRequestType:WB_ACK;
  } else if(type == CoherenceRequestType:EXE_ACK) {
    return GenericRequestType:EXE_ACK;
  } else {
    DEBUG_EXPR(type);
    error("invalid CoherenceRequestType");
  }
}
